
Defines found: 57

Define 001: RAYLIB_H
  Name: RAYLIB_H
  Type: GUARD
  Value: 
  Description: 
Define 002: RAYLIB_VERSION_MAJOR
  Name: RAYLIB_VERSION_MAJOR
  Type: INT
  Value: 5
  Description: 
Define 003: RAYLIB_VERSION_MINOR
  Name: RAYLIB_VERSION_MINOR
  Type: INT
  Value: 1
  Description: 
Define 004: RAYLIB_VERSION_PATCH
  Name: RAYLIB_VERSION_PATCH
  Type: INT
  Value: 0
  Description: 
Define 005: RAYLIB_VERSION
  Name: RAYLIB_VERSION
  Type: STRING
  Value: "5.1-dev"
  Description: 
Define 006: __declspec(x)
  Name: __declspec(x)
  Type: MACRO
  Value: __attribute__((x))
  Description: 
Define 007: RLAPI
  Name: RLAPI
  Type: UNKNOWN
  Value: __declspec(dllexport)
  Description: We are building the library as a Win32 shared library (.dll)
Define 008: PI
  Name: PI
  Type: FLOAT
  Value: 3.14159265358979323846
  Description: 
Define 009: DEG2RAD
  Name: DEG2RAD
  Type: FLOAT_MATH
  Value: (PI / 180.0f)
  Description: 
Define 010: RAD2DEG
  Name: RAD2DEG
  Type: FLOAT_MATH
  Value: (180.0f / PI)
  Description: 
Define 011: RL_MALLOC(sz)
  Name: RL_MALLOC(sz)
  Type: MACRO
  Value: malloc(sz)
  Description: 
Define 012: RL_CALLOC(n, sz)
  Name: RL_CALLOC(n, sz)
  Type: MACRO
  Value: calloc(n, sz)
  Description: 
Define 013: RL_REALLOC(ptr, sz)
  Name: RL_REALLOC(ptr, sz)
  Type: MACRO
  Value: realloc(ptr, sz)
  Description: 
Define 014: RL_FREE(ptr)
  Name: RL_FREE(ptr)
  Type: MACRO
  Value: free(ptr)
  Description: 
Define 015: CLITERAL(type)
  Name: CLITERAL(type)
  Type: MACRO
  Value: type
  Description: 
Define 016: RL_COLOR_TYPE
  Name: RL_COLOR_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 017: RL_RECTANGLE_TYPE
  Name: RL_RECTANGLE_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 018: RL_VECTOR2_TYPE
  Name: RL_VECTOR2_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 019: RL_VECTOR3_TYPE
  Name: RL_VECTOR3_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 020: RL_VECTOR4_TYPE
  Name: RL_VECTOR4_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 021: RL_QUATERNION_TYPE
  Name: RL_QUATERNION_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 022: RL_MATRIX_TYPE
  Name: RL_MATRIX_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 023: LIGHTGRAY
  Name: LIGHTGRAY
  Type: UNKNOWN
  Value: 
  Description: 
Define 024: GRAY
  Name: GRAY
  Type: UNKNOWN
  Value: 
  Description: 
Define 025: DARKGRAY
  Name: DARKGRAY
  Type: UNKNOWN
  Value: 
  Description: 
Define 026: YELLOW
  Name: YELLOW
  Type: UNKNOWN
  Value: 
  Description: 
Define 027: GOLD
  Name: GOLD
  Type: UNKNOWN
  Value: 
  Description: 
Define 028: ORANGE
  Name: ORANGE
  Type: UNKNOWN
  Value: 
  Description: 
Define 029: PINK
  Name: PINK
  Type: UNKNOWN
  Value: 
  Description: 
Define 030: RED
  Name: RED
  Type: UNKNOWN
  Value: 
  Description: 
Define 031: MAROON
  Name: MAROON
  Type: UNKNOWN
  Value: 
  Description: 
Define 032: GREEN
  Name: GREEN
  Type: UNKNOWN
  Value: 
  Description: 
Define 033: LIME
  Name: LIME
  Type: UNKNOWN
  Value: 
  Description: 
Define 034: DARKGREEN
  Name: DARKGREEN
  Type: UNKNOWN
  Value: 
  Description: 
Define 035: SKYBLUE
  Name: SKYBLUE
  Type: UNKNOWN
  Value: 
  Description: 
Define 036: BLUE
  Name: BLUE
  Type: UNKNOWN
  Value: 
  Description: 
Define 037: DARKBLUE
  Name: DARKBLUE
  Type: UNKNOWN
  Value: 
  Description: 
Define 038: PURPLE
  Name: PURPLE
  Type: UNKNOWN
  Value: 
  Description: 
Define 039: VIOLET
  Name: VIOLET
  Type: UNKNOWN
  Value: 
  Description: 
Define 040: DARKPURPLE
  Name: DARKPURPLE
  Type: UNKNOWN
  Value: 
  Description: 
Define 041: BEIGE
  Name: BEIGE
  Type: UNKNOWN
  Value: 
  Description: 
Define 042: BROWN
  Name: BROWN
  Type: UNKNOWN
  Value: 
  Description: 
Define 043: DARKBROWN
  Name: DARKBROWN
  Type: UNKNOWN
  Value: 
  Description: 
Define 044: WHITE
  Name: WHITE
  Type: UNKNOWN
  Value: 
  Description: 
Define 045: BLACK
  Name: BLACK
  Type: UNKNOWN
  Value: 
  Description: 
Define 046: BLANK
  Name: BLANK
  Type: UNKNOWN
  Value: 
  Description: 
Define 047: MAGENTA
  Name: MAGENTA
  Type: UNKNOWN
  Value: 
  Description: 
Define 048: RAYWHITE
  Name: RAYWHITE
  Type: UNKNOWN
  Value: 
  Description: 
Define 049: RL_BOOL_TYPE
  Name: RL_BOOL_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 050: MOUSE_LEFT_BUTTON
  Name: MOUSE_LEFT_BUTTON
  Type: UNKNOWN
  Value: MOUSE_BUTTON_LEFT
  Description: 
Define 051: MOUSE_RIGHT_BUTTON
  Name: MOUSE_RIGHT_BUTTON
  Type: UNKNOWN
  Value: MOUSE_BUTTON_RIGHT
  Description: 
Define 052: MOUSE_MIDDLE_BUTTON
  Name: MOUSE_MIDDLE_BUTTON
  Type: UNKNOWN
  Value: MOUSE_BUTTON_MIDDLE
  Description: 
Define 053: MATERIAL_MAP_DIFFUSE
  Name: MATERIAL_MAP_DIFFUSE
  Type: UNKNOWN
  Value: MATERIAL_MAP_ALBEDO
  Description: 
Define 054: MATERIAL_MAP_SPECULAR
  Name: MATERIAL_MAP_SPECULAR
  Type: UNKNOWN
  Value: MATERIAL_MAP_METALNESS
  Description: 
Define 055: SHADER_LOC_MAP_DIFFUSE
  Name: SHADER_LOC_MAP_DIFFUSE
  Type: UNKNOWN
  Value: SHADER_LOC_MAP_ALBEDO
  Description: 
Define 056: SHADER_LOC_MAP_SPECULAR
  Name: SHADER_LOC_MAP_SPECULAR
  Type: UNKNOWN
  Value: SHADER_LOC_MAP_METALNESS
  Description: 
Define 057: GetMouseRay
  Name: GetMouseRay
  Type: UNKNOWN
  Value: GetScreenToWorldRay
  Description: Compatibility hack for previous raylib versions

Structures found: 0


Aliases found: 5

Alias 001: Quaternion
  Type: Vector4
  Name: Quaternion
  Description: Quaternion, 4 components (Vector4 alias)
Alias 002: Texture2D
  Type: Texture
  Name: Texture2D
  Description: Texture2D, same as Texture
Alias 003: TextureCubemap
  Type: Texture
  Name: TextureCubemap
  Description: TextureCubemap, same as Texture
Alias 004: RenderTexture2D
  Type: RenderTexture
  Name: RenderTexture2D
  Description: RenderTexture2D, same as RenderTexture
Alias 005: Camera
  Type: Camera3D
  Name: Camera
  Description: Camera type fallback, defaults to Camera3D

Enums found: 0


Callbacks found: 6

Callback 001: TraceLogCallback() (3 input parameters)
  Name: TraceLogCallback
  Return type: void
  Description: Logging: Redirect trace log messages
  Param[1]: logLevel (type: int)
  Param[2]: text (type: const char *)
  Param[3]: args (type: va_list)
Callback 002: LoadFileDataCallback() (2 input parameters)
  Name: LoadFileDataCallback
  Return type: unsigned char *
  Description: FileIO: Load binary data
  Param[1]: fileName (type: const char *)
  Param[2]: dataSize (type: int *)
Callback 003: SaveFileDataCallback() (3 input parameters)
  Name: SaveFileDataCallback
  Return type: bool
  Description: FileIO: Save binary data
  Param[1]: fileName (type: const char *)
  Param[2]: data (type: void *)
  Param[3]: dataSize (type: int)
Callback 004: LoadFileTextCallback() (1 input parameters)
  Name: LoadFileTextCallback
  Return type: char *
  Description: FileIO: Load text data
  Param[1]: fileName (type: const char *)
Callback 005: SaveFileTextCallback() (2 input parameters)
  Name: SaveFileTextCallback
  Return type: bool
  Description: FileIO: Save text data
  Param[1]: fileName (type: const char *)
  Param[2]: text (type: char *)
Callback 006: AudioCallback() (2 input parameters)
  Name: AudioCallback
  Return type: void
  Description: 
  Param[1]: bufferData (type: void *)
  Param[2]: frames (type: unsigned int)

Functions found: 566

Function 001: InitWindow() (3 input parameters)
  Name: InitWindow
  Return type: void
  Description: Initialize window and OpenGL context
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: title (type: const char *)
Function 002: CloseWindow() (0 input parameters)
  Name: CloseWindow
  Return type: void
  Description: Close window and unload OpenGL context
  No input parameters
Function 003: WindowShouldClose() (0 input parameters)
  Name: WindowShouldClose
  Return type: bool
  Description: Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
  No input parameters
Function 004: IsWindowReady() (0 input parameters)
  Name: IsWindowReady
  Return type: bool
  Description: Check if window has been initialized successfully
  No input parameters
Function 005: IsWindowFullscreen() (0 input parameters)
  Name: IsWindowFullscreen
  Return type: bool
  Description: Check if window is currently fullscreen
  No input parameters
Function 006: IsWindowHidden() (0 input parameters)
  Name: IsWindowHidden
  Return type: bool
  Description: Check if window is currently hidden (only PLATFORM_DESKTOP)
  No input parameters
Function 007: IsWindowMinimized() (0 input parameters)
  Name: IsWindowMinimized
  Return type: bool
  Description: Check if window is currently minimized (only PLATFORM_DESKTOP)
  No input parameters
Function 008: IsWindowMaximized() (0 input parameters)
  Name: IsWindowMaximized
  Return type: bool
  Description: Check if window is currently maximized (only PLATFORM_DESKTOP)
  No input parameters
Function 009: IsWindowFocused() (0 input parameters)
  Name: IsWindowFocused
  Return type: bool
  Description: Check if window is currently focused (only PLATFORM_DESKTOP)
  No input parameters
Function 010: IsWindowResized() (0 input parameters)
  Name: IsWindowResized
  Return type: bool
  Description: Check if window has been resized last frame
  No input parameters
Function 011: IsWindowState() (1 input parameters)
  Name: IsWindowState
  Return type: bool
  Description: Check if one specific window flag is enabled
  Param[1]: flag (type: unsigned int)
Function 012: SetWindowState() (1 input parameters)
  Name: SetWindowState
  Return type: void
  Description: Set window configuration state using flags (only PLATFORM_DESKTOP)
  Param[1]: flags (type: unsigned int)
Function 013: ClearWindowState() (1 input parameters)
  Name: ClearWindowState
  Return type: void
  Description: Clear window configuration state flags
  Param[1]: flags (type: unsigned int)
Function 014: ToggleFullscreen() (0 input parameters)
  Name: ToggleFullscreen
  Return type: void
  Description: Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
  No input parameters
Function 015: ToggleBorderlessWindowed() (0 input parameters)
  Name: ToggleBorderlessWindowed
  Return type: void
  Description: Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
  No input parameters
Function 016: MaximizeWindow() (0 input parameters)
  Name: MaximizeWindow
  Return type: void
  Description: Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
  No input parameters
Function 017: MinimizeWindow() (0 input parameters)
  Name: MinimizeWindow
  Return type: void
  Description: Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
  No input parameters
Function 018: RestoreWindow() (0 input parameters)
  Name: RestoreWindow
  Return type: void
  Description: Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
  No input parameters
Function 019: SetWindowIcon() (1 input parameters)
  Name: SetWindowIcon
  Return type: void
  Description: Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
  Param[1]: image (type: Image)
Function 020: SetWindowIcons() (2 input parameters)
  Name: SetWindowIcons
  Return type: void
  Description: Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
  Param[1]: images (type: Image *)
  Param[2]: count (type: int)
Function 021: SetWindowTitle() (1 input parameters)
  Name: SetWindowTitle
  Return type: void
  Description: Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
  Param[1]: title (type: const char *)
Function 022: SetWindowPosition() (2 input parameters)
  Name: SetWindowPosition
  Return type: void
  Description: Set window position on screen (only PLATFORM_DESKTOP)
  Param[1]: x (type: int)
  Param[2]: y (type: int)
Function 023: SetWindowMonitor() (1 input parameters)
  Name: SetWindowMonitor
  Return type: void
  Description: Set monitor for the current window
  Param[1]: monitor (type: int)
Function 024: SetWindowMinSize() (2 input parameters)
  Name: SetWindowMinSize
  Return type: void
  Description: Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 025: SetWindowMaxSize() (2 input parameters)
  Name: SetWindowMaxSize
  Return type: void
  Description: Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 026: SetWindowSize() (2 input parameters)
  Name: SetWindowSize
  Return type: void
  Description: Set window dimensions
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 027: SetWindowOpacity() (1 input parameters)
  Name: SetWindowOpacity
  Return type: void
  Description: Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
  Param[1]: opacity (type: float)
Function 028: SetWindowFocused() (0 input parameters)
  Name: SetWindowFocused
  Return type: void
  Description: Set window focused (only PLATFORM_DESKTOP)
  No input parameters
Function 029: GetWindowHandle() (0 input parameters)
  Name: GetWindowHandle
  Return type: void *
  Description: Get native window handle
  No input parameters
Function 030: GetScreenWidth() (0 input parameters)
  Name: GetScreenWidth
  Return type: int
  Description: Get current screen width
  No input parameters
Function 031: GetScreenHeight() (0 input parameters)
  Name: GetScreenHeight
  Return type: int
  Description: Get current screen height
  No input parameters
Function 032: GetRenderWidth() (0 input parameters)
  Name: GetRenderWidth
  Return type: int
  Description: Get current render width (it considers HiDPI)
  No input parameters
Function 033: GetRenderHeight() (0 input parameters)
  Name: GetRenderHeight
  Return type: int
  Description: Get current render height (it considers HiDPI)
  No input parameters
Function 034: GetMonitorCount() (0 input parameters)
  Name: GetMonitorCount
  Return type: int
  Description: Get number of connected monitors
  No input parameters
Function 035: GetCurrentMonitor() (0 input parameters)
  Name: GetCurrentMonitor
  Return type: int
  Description: Get current connected monitor
  No input parameters
Function 036: GetMonitorPosition() (1 input parameters)
  Name: GetMonitorPosition
  Return type: Vector2
  Description: Get specified monitor position
  Param[1]: monitor (type: int)
Function 037: GetMonitorWidth() (1 input parameters)
  Name: GetMonitorWidth
  Return type: int
  Description: Get specified monitor width (current video mode used by monitor)
  Param[1]: monitor (type: int)
Function 038: GetMonitorHeight() (1 input parameters)
  Name: GetMonitorHeight
  Return type: int
  Description: Get specified monitor height (current video mode used by monitor)
  Param[1]: monitor (type: int)
Function 039: GetMonitorPhysicalWidth() (1 input parameters)
  Name: GetMonitorPhysicalWidth
  Return type: int
  Description: Get specified monitor physical width in millimetres
  Param[1]: monitor (type: int)
Function 040: GetMonitorPhysicalHeight() (1 input parameters)
  Name: GetMonitorPhysicalHeight
  Return type: int
  Description: Get specified monitor physical height in millimetres
  Param[1]: monitor (type: int)
Function 041: GetMonitorRefreshRate() (1 input parameters)
  Name: GetMonitorRefreshRate
  Return type: int
  Description: Get specified monitor refresh rate
  Param[1]: monitor (type: int)
Function 042: GetWindowPosition() (0 input parameters)
  Name: GetWindowPosition
  Return type: Vector2
  Description: Get window position XY on monitor
  No input parameters
Function 043: GetWindowScaleDPI() (0 input parameters)
  Name: GetWindowScaleDPI
  Return type: Vector2
  Description: Get window scale DPI factor
  No input parameters
Function 044: GetMonitorName() (1 input parameters)
  Name: GetMonitorName
  Return type: const char *
  Description: Get the human-readable, UTF-8 encoded name of the specified monitor
  Param[1]: monitor (type: int)
Function 045: SetClipboardText() (1 input parameters)
  Name: SetClipboardText
  Return type: void
  Description: Set clipboard text content
  Param[1]: text (type: const char *)
Function 046: GetClipboardText() (0 input parameters)
  Name: GetClipboardText
  Return type: const char *
  Description: Get clipboard text content
  No input parameters
Function 047: EnableEventWaiting() (0 input parameters)
  Name: EnableEventWaiting
  Return type: void
  Description: Enable waiting for events on EndDrawing(), no automatic event polling
  No input parameters
Function 048: DisableEventWaiting() (0 input parameters)
  Name: DisableEventWaiting
  Return type: void
  Description: Disable waiting for events on EndDrawing(), automatic events polling
  No input parameters
Function 049: ShowCursor() (0 input parameters)
  Name: ShowCursor
  Return type: void
  Description: Shows cursor
  No input parameters
Function 050: HideCursor() (0 input parameters)
  Name: HideCursor
  Return type: void
  Description: Hides cursor
  No input parameters
Function 051: IsCursorHidden() (0 input parameters)
  Name: IsCursorHidden
  Return type: bool
  Description: Check if cursor is not visible
  No input parameters
Function 052: EnableCursor() (0 input parameters)
  Name: EnableCursor
  Return type: void
  Description: Enables cursor (unlock cursor)
  No input parameters
Function 053: DisableCursor() (0 input parameters)
  Name: DisableCursor
  Return type: void
  Description: Disables cursor (lock cursor)
  No input parameters
Function 054: IsCursorOnScreen() (0 input parameters)
  Name: IsCursorOnScreen
  Return type: bool
  Description: Check if cursor is on the screen
  No input parameters
Function 055: ClearBackground() (1 input parameters)
  Name: ClearBackground
  Return type: void
  Description: Set background color (framebuffer clear color)
  Param[1]: color (type: Color)
Function 056: BeginDrawing() (0 input parameters)
  Name: BeginDrawing
  Return type: void
  Description: Setup canvas (framebuffer) to start drawing
  No input parameters
Function 057: EndDrawing() (0 input parameters)
  Name: EndDrawing
  Return type: void
  Description: End canvas drawing and swap buffers (double buffering)
  No input parameters
Function 058: BeginMode2D() (1 input parameters)
  Name: BeginMode2D
  Return type: void
  Description: Begin 2D mode with custom camera (2D)
  Param[1]: camera (type: Camera2D)
Function 059: EndMode2D() (0 input parameters)
  Name: EndMode2D
  Return type: void
  Description: Ends 2D mode with custom camera
  No input parameters
Function 060: BeginMode3D() (1 input parameters)
  Name: BeginMode3D
  Return type: void
  Description: Begin 3D mode with custom camera (3D)
  Param[1]: camera (type: Camera3D)
Function 061: EndMode3D() (0 input parameters)
  Name: EndMode3D
  Return type: void
  Description: Ends 3D mode and returns to default 2D orthographic mode
  No input parameters
Function 062: BeginTextureMode() (1 input parameters)
  Name: BeginTextureMode
  Return type: void
  Description: Begin drawing to render texture
  Param[1]: target (type: RenderTexture2D)
Function 063: EndTextureMode() (0 input parameters)
  Name: EndTextureMode
  Return type: void
  Description: Ends drawing to render texture
  No input parameters
Function 064: BeginShaderMode() (1 input parameters)
  Name: BeginShaderMode
  Return type: void
  Description: Begin custom shader drawing
  Param[1]: shader (type: Shader)
Function 065: EndShaderMode() (0 input parameters)
  Name: EndShaderMode
  Return type: void
  Description: End custom shader drawing (use default shader)
  No input parameters
Function 066: BeginBlendMode() (1 input parameters)
  Name: BeginBlendMode
  Return type: void
  Description: Begin blending mode (alpha, additive, multiplied, subtract, custom)
  Param[1]: mode (type: int)
Function 067: EndBlendMode() (0 input parameters)
  Name: EndBlendMode
  Return type: void
  Description: End blending mode (reset to default: alpha blending)
  No input parameters
Function 068: BeginScissorMode() (4 input parameters)
  Name: BeginScissorMode
  Return type: void
  Description: Begin scissor mode (define screen area for following drawing)
  Param[1]: x (type: int)
  Param[2]: y (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 069: EndScissorMode() (0 input parameters)
  Name: EndScissorMode
  Return type: void
  Description: End scissor mode
  No input parameters
Function 070: BeginVrStereoMode() (1 input parameters)
  Name: BeginVrStereoMode
  Return type: void
  Description: Begin stereo rendering (requires VR simulator)
  Param[1]: config (type: VrStereoConfig)
Function 071: EndVrStereoMode() (0 input parameters)
  Name: EndVrStereoMode
  Return type: void
  Description: End stereo rendering (requires VR simulator)
  No input parameters
Function 072: LoadVrStereoConfig() (1 input parameters)
  Name: LoadVrStereoConfig
  Return type: VrStereoConfig
  Description: Load VR stereo config for VR simulator device parameters
  Param[1]: device (type: VrDeviceInfo)
Function 073: UnloadVrStereoConfig() (1 input parameters)
  Name: UnloadVrStereoConfig
  Return type: void
  Description: Unload VR stereo config
  Param[1]: config (type: VrStereoConfig)
Function 074: LoadShader() (2 input parameters)
  Name: LoadShader
  Return type: Shader
  Description: Load shader from files and bind default locations
  Param[1]: vsFileName (type: const char *)
  Param[2]: fsFileName (type: const char *)
Function 075: LoadShaderFromMemory() (2 input parameters)
  Name: LoadShaderFromMemory
  Return type: Shader
  Description: Load shader from code strings and bind default locations
  Param[1]: vsCode (type: const char *)
  Param[2]: fsCode (type: const char *)
Function 076: IsShaderReady() (1 input parameters)
  Name: IsShaderReady
  Return type: bool
  Description: Check if a shader is ready
  Param[1]: shader (type: Shader)
Function 077: GetShaderLocation() (2 input parameters)
  Name: GetShaderLocation
  Return type: int
  Description: Get shader uniform location
  Param[1]: shader (type: Shader)
  Param[2]: uniformName (type: const char *)
Function 078: GetShaderLocationAttrib() (2 input parameters)
  Name: GetShaderLocationAttrib
  Return type: int
  Description: Get shader attribute location
  Param[1]: shader (type: Shader)
  Param[2]: attribName (type: const char *)
Function 079: SetShaderValue() (4 input parameters)
  Name: SetShaderValue
  Return type: void
  Description: Set shader uniform value
  Param[1]: shader (type: Shader)
  Param[2]: locIndex (type: int)
  Param[3]: value (type: const void *)
  Param[4]: uniformType (type: int)
Function 080: SetShaderValueV() (5 input parameters)
  Name: SetShaderValueV
  Return type: void
  Description: Set shader uniform value vector
  Param[1]: shader (type: Shader)
  Param[2]: locIndex (type: int)
  Param[3]: value (type: const void *)
  Param[4]: uniformType (type: int)
  Param[5]: count (type: int)
Function 081: SetShaderValueMatrix() (3 input parameters)
  Name: SetShaderValueMatrix
  Return type: void
  Description: Set shader uniform value (matrix 4x4)
  Param[1]: shader (type: Shader)
  Param[2]: locIndex (type: int)
  Param[3]: mat (type: Matrix)
Function 082: SetShaderValueTexture() (3 input parameters)
  Name: SetShaderValueTexture
  Return type: void
  Description: Set shader uniform value for texture (sampler2d)
  Param[1]: shader (type: Shader)
  Param[2]: locIndex (type: int)
  Param[3]: texture (type: Texture2D)
Function 083: UnloadShader() (1 input parameters)
  Name: UnloadShader
  Return type: void
  Description: Unload shader from GPU memory (VRAM)
  Param[1]: shader (type: Shader)
Function 084: GetScreenToWorldRay() (2 input parameters)
  Name: GetScreenToWorldRay
  Return type: Ray
  Description: Get a ray trace from screen position (i.e mouse)
  Param[1]: position (type: Vector2)
  Param[2]: camera (type: Camera)
Function 085: GetScreenToWorldRayEx() (4 input parameters)
  Name: GetScreenToWorldRayEx
  Return type: Ray
  Description: Get a ray trace from screen position (i.e mouse) in a viewport
  Param[1]: position (type: Vector2)
  Param[2]: camera (type: Camera)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 086: GetWorldToScreen() (2 input parameters)
  Name: GetWorldToScreen
  Return type: Vector2
  Description: Get the screen space position for a 3d world space position
  Param[1]: position (type: Vector3)
  Param[2]: camera (type: Camera)
Function 087: GetWorldToScreenEx() (4 input parameters)
  Name: GetWorldToScreenEx
  Return type: Vector2
  Description: Get size position for a 3d world space position
  Param[1]: position (type: Vector3)
  Param[2]: camera (type: Camera)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 088: GetWorldToScreen2D() (2 input parameters)
  Name: GetWorldToScreen2D
  Return type: Vector2
  Description: Get the screen space position for a 2d camera world space position
  Param[1]: position (type: Vector2)
  Param[2]: camera (type: Camera2D)
Function 089: GetScreenToWorld2D() (2 input parameters)
  Name: GetScreenToWorld2D
  Return type: Vector2
  Description: Get the world space position for a 2d camera screen space position
  Param[1]: position (type: Vector2)
  Param[2]: camera (type: Camera2D)
Function 090: GetCameraMatrix() (1 input parameters)
  Name: GetCameraMatrix
  Return type: Matrix
  Description: Get camera transform matrix (view matrix)
  Param[1]: camera (type: Camera)
Function 091: GetCameraMatrix2D() (1 input parameters)
  Name: GetCameraMatrix2D
  Return type: Matrix
  Description: Get camera 2d transform matrix
  Param[1]: camera (type: Camera2D)
Function 092: SetTargetFPS() (1 input parameters)
  Name: SetTargetFPS
  Return type: void
  Description: Set target FPS (maximum)
  Param[1]: fps (type: int)
Function 093: GetFrameTime() (0 input parameters)
  Name: GetFrameTime
  Return type: float
  Description: Get time in seconds for last frame drawn (delta time)
  No input parameters
Function 094: GetTime() (0 input parameters)
  Name: GetTime
  Return type: double
  Description: Get elapsed time in seconds since InitWindow()
  No input parameters
Function 095: GetFPS() (0 input parameters)
  Name: GetFPS
  Return type: int
  Description: Get current FPS
  No input parameters
Function 096: SwapScreenBuffer() (0 input parameters)
  Name: SwapScreenBuffer
  Return type: void
  Description: Swap back buffer with front buffer (screen drawing)
  No input parameters
Function 097: PollInputEvents() (0 input parameters)
  Name: PollInputEvents
  Return type: void
  Description: Register all input events
  No input parameters
Function 098: WaitTime() (1 input parameters)
  Name: WaitTime
  Return type: void
  Description: Wait for some time (halt program execution)
  Param[1]: seconds (type: double)
Function 099: SetRandomSeed() (1 input parameters)
  Name: SetRandomSeed
  Return type: void
  Description: Set the seed for the random number generator
  Param[1]: seed (type: unsigned int)
Function 100: GetRandomValue() (2 input parameters)
  Name: GetRandomValue
  Return type: int
  Description: Get a random value between min and max (both included)
  Param[1]: min (type: int)
  Param[2]: max (type: int)
Function 101: LoadRandomSequence() (3 input parameters)
  Name: LoadRandomSequence
  Return type: int *
  Description: Load random values sequence, no values repeated
  Param[1]: count (type: unsigned int)
  Param[2]: min (type: int)
  Param[3]: max (type: int)
Function 102: UnloadRandomSequence() (1 input parameters)
  Name: UnloadRandomSequence
  Return type: void
  Description: Unload random values sequence
  Param[1]: sequence (type: int *)
Function 103: TakeScreenshot() (1 input parameters)
  Name: TakeScreenshot
  Return type: void
  Description: Takes a screenshot of current screen (filename extension defines format)
  Param[1]: fileName (type: const char *)
Function 104: SetConfigFlags() (1 input parameters)
  Name: SetConfigFlags
  Return type: void
  Description: Setup init configuration flags (view FLAGS)
  Param[1]: flags (type: unsigned int)
Function 105: OpenURL() (1 input parameters)
  Name: OpenURL
  Return type: void
  Description: Open URL with default system browser (if available)
  Param[1]: url (type: const char *)
Function 106: TraceLog() (3 input parameters)
  Name: TraceLog
  Return type: void
  Description: Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
  Param[1]: logLevel (type: int)
  Param[2]: text (type: const char *)
  Param[3]: args (type: ...)
Function 107: SetTraceLogLevel() (1 input parameters)
  Name: SetTraceLogLevel
  Return type: void
  Description: Set the current threshold (minimum) log level
  Param[1]: logLevel (type: int)
Function 108: MemAlloc() (1 input parameters)
  Name: MemAlloc
  Return type: void *
  Description: Internal memory allocator
  Param[1]: size (type: unsigned int)
Function 109: MemRealloc() (2 input parameters)
  Name: MemRealloc
  Return type: void *
  Description: Internal memory reallocator
  Param[1]: ptr (type: void *)
  Param[2]: size (type: unsigned int)
Function 110: MemFree() (1 input parameters)
  Name: MemFree
  Return type: void
  Description: Internal memory free
  Param[1]: ptr (type: void *)
Function 111: SetTraceLogCallback() (1 input parameters)
  Name: SetTraceLogCallback
  Return type: void
  Description: Set custom trace log
  Param[1]: callback (type: TraceLogCallback)
Function 112: SetLoadFileDataCallback() (1 input parameters)
  Name: SetLoadFileDataCallback
  Return type: void
  Description: Set custom file binary data loader
  Param[1]: callback (type: LoadFileDataCallback)
Function 113: SetSaveFileDataCallback() (1 input parameters)
  Name: SetSaveFileDataCallback
  Return type: void
  Description: Set custom file binary data saver
  Param[1]: callback (type: SaveFileDataCallback)
Function 114: SetLoadFileTextCallback() (1 input parameters)
  Name: SetLoadFileTextCallback
  Return type: void
  Description: Set custom file text data loader
  Param[1]: callback (type: LoadFileTextCallback)
Function 115: SetSaveFileTextCallback() (1 input parameters)
  Name: SetSaveFileTextCallback
  Return type: void
  Description: Set custom file text data saver
  Param[1]: callback (type: SaveFileTextCallback)
Function 116: LoadFileData() (2 input parameters)
  Name: LoadFileData
  Return type: unsigned char *
  Description: Load file data as byte array (read)
  Param[1]: fileName (type: const char *)
  Param[2]: dataSize (type: int *)
Function 117: UnloadFileData() (1 input parameters)
  Name: UnloadFileData
  Return type: void
  Description: Unload file data allocated by LoadFileData()
  Param[1]: data (type: unsigned char *)
Function 118: SaveFileData() (3 input parameters)
  Name: SaveFileData
  Return type: bool
  Description: Save data to file from byte array (write), returns true on success
  Param[1]: fileName (type: const char *)
  Param[2]: data (type: void *)
  Param[3]: dataSize (type: int)
Function 119: ExportDataAsCode() (3 input parameters)
  Name: ExportDataAsCode
  Return type: bool
  Description: Export data to code (.h), returns true on success
  Param[1]: data (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: fileName (type: const char *)
Function 120: LoadFileText() (1 input parameters)
  Name: LoadFileText
  Return type: char *
  Description: Load text data from file (read), returns a '\0' terminated string
  Param[1]: fileName (type: const char *)
Function 121: UnloadFileText() (1 input parameters)
  Name: UnloadFileText
  Return type: void
  Description: Unload file text data allocated by LoadFileText()
  Param[1]: text (type: char *)
Function 122: SaveFileText() (2 input parameters)
  Name: SaveFileText
  Return type: bool
  Description: Save text data to file (write), string must be '\0' terminated, returns true on success
  Param[1]: fileName (type: const char *)
  Param[2]: text (type: char *)
Function 123: FileExists() (1 input parameters)
  Name: FileExists
  Return type: bool
  Description: Check if file exists
  Param[1]: fileName (type: const char *)
Function 124: DirectoryExists() (1 input parameters)
  Name: DirectoryExists
  Return type: bool
  Description: Check if a directory path exists
  Param[1]: dirPath (type: const char *)
Function 125: IsFileExtension() (2 input parameters)
  Name: IsFileExtension
  Return type: bool
  Description: Check file extension (including point: .png, .wav)
  Param[1]: fileName (type: const char *)
  Param[2]: ext (type: const char *)
Function 126: GetFileLength() (1 input parameters)
  Name: GetFileLength
  Return type: int
  Description: Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
  Param[1]: fileName (type: const char *)
Function 127: GetFileExtension() (1 input parameters)
  Name: GetFileExtension
  Return type: const char *
  Description: Get pointer to extension for a filename string (includes dot: '.png')
  Param[1]: fileName (type: const char *)
Function 128: GetFileName() (1 input parameters)
  Name: GetFileName
  Return type: const char *
  Description: Get pointer to filename for a path string
  Param[1]: filePath (type: const char *)
Function 129: GetFileNameWithoutExt() (1 input parameters)
  Name: GetFileNameWithoutExt
  Return type: const char *
  Description: Get filename string without extension (uses static string)
  Param[1]: filePath (type: const char *)
Function 130: GetDirectoryPath() (1 input parameters)
  Name: GetDirectoryPath
  Return type: const char *
  Description: Get full path for a given fileName with path (uses static string)
  Param[1]: filePath (type: const char *)
Function 131: GetPrevDirectoryPath() (1 input parameters)
  Name: GetPrevDirectoryPath
  Return type: const char *
  Description: Get previous directory path for a given path (uses static string)
  Param[1]: dirPath (type: const char *)
Function 132: GetWorkingDirectory() (0 input parameters)
  Name: GetWorkingDirectory
  Return type: const char *
  Description: Get current working directory (uses static string)
  No input parameters
Function 133: GetApplicationDirectory() (0 input parameters)
  Name: GetApplicationDirectory
  Return type: const char *
  Description: Get the directory of the running application (uses static string)
  No input parameters
Function 134: ChangeDirectory() (1 input parameters)
  Name: ChangeDirectory
  Return type: bool
  Description: Change working directory, return true on success
  Param[1]: dir (type: const char *)
Function 135: IsPathFile() (1 input parameters)
  Name: IsPathFile
  Return type: bool
  Description: Check if a given path is a file or a directory
  Param[1]: path (type: const char *)
Function 136: IsFileNameValid() (1 input parameters)
  Name: IsFileNameValid
  Return type: bool
  Description: Check if fileName is valid for the platform/OS
  Param[1]: fileName (type: const char *)
Function 137: LoadDirectoryFiles() (1 input parameters)
  Name: LoadDirectoryFiles
  Return type: FilePathList
  Description: Load directory filepaths
  Param[1]: dirPath (type: const char *)
Function 138: LoadDirectoryFilesEx() (3 input parameters)
  Name: LoadDirectoryFilesEx
  Return type: FilePathList
  Description: Load directory filepaths with extension filtering and recursive directory scan
  Param[1]: basePath (type: const char *)
  Param[2]: filter (type: const char *)
  Param[3]: scanSubdirs (type: bool)
Function 139: UnloadDirectoryFiles() (1 input parameters)
  Name: UnloadDirectoryFiles
  Return type: void
  Description: Unload filepaths
  Param[1]: files (type: FilePathList)
Function 140: IsFileDropped() (0 input parameters)
  Name: IsFileDropped
  Return type: bool
  Description: Check if a file has been dropped into window
  No input parameters
Function 141: LoadDroppedFiles() (0 input parameters)
  Name: LoadDroppedFiles
  Return type: FilePathList
  Description: Load dropped filepaths
  No input parameters
Function 142: UnloadDroppedFiles() (1 input parameters)
  Name: UnloadDroppedFiles
  Return type: void
  Description: Unload dropped filepaths
  Param[1]: files (type: FilePathList)
Function 143: GetFileModTime() (1 input parameters)
  Name: GetFileModTime
  Return type: long
  Description: Get file modification time (last write time)
  Param[1]: fileName (type: const char *)
Function 144: CompressData() (3 input parameters)
  Name: CompressData
  Return type: unsigned char *
  Description: Compress data (DEFLATE algorithm), memory must be MemFree()
  Param[1]: data (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: compDataSize (type: int *)
Function 145: DecompressData() (3 input parameters)
  Name: DecompressData
  Return type: unsigned char *
  Description: Decompress data (DEFLATE algorithm), memory must be MemFree()
  Param[1]: compData (type: const unsigned char *)
  Param[2]: compDataSize (type: int)
  Param[3]: dataSize (type: int *)
Function 146: EncodeDataBase64() (3 input parameters)
  Name: EncodeDataBase64
  Return type: char *
  Description: Encode data to Base64 string, memory must be MemFree()
  Param[1]: data (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: outputSize (type: int *)
Function 147: DecodeDataBase64() (2 input parameters)
  Name: DecodeDataBase64
  Return type: unsigned char *
  Description: Decode Base64 string data, memory must be MemFree()
  Param[1]: data (type: const unsigned char *)
  Param[2]: outputSize (type: int *)
Function 148: LoadAutomationEventList() (1 input parameters)
  Name: LoadAutomationEventList
  Return type: AutomationEventList
  Description: Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
  Param[1]: fileName (type: const char *)
Function 149: UnloadAutomationEventList() (1 input parameters)
  Name: UnloadAutomationEventList
  Return type: void
  Description: Unload automation events list from file
  Param[1]: list (type: AutomationEventList)
Function 150: ExportAutomationEventList() (2 input parameters)
  Name: ExportAutomationEventList
  Return type: bool
  Description: Export automation events list as text file
  Param[1]: list (type: AutomationEventList)
  Param[2]: fileName (type: const char *)
Function 151: SetAutomationEventList() (1 input parameters)
  Name: SetAutomationEventList
  Return type: void
  Description: Set automation event list to record to
  Param[1]: list (type: AutomationEventList *)
Function 152: SetAutomationEventBaseFrame() (1 input parameters)
  Name: SetAutomationEventBaseFrame
  Return type: void
  Description: Set automation event internal base frame to start recording
  Param[1]: frame (type: int)
Function 153: StartAutomationEventRecording() (0 input parameters)
  Name: StartAutomationEventRecording
  Return type: void
  Description: Start recording automation events (AutomationEventList must be set)
  No input parameters
Function 154: StopAutomationEventRecording() (0 input parameters)
  Name: StopAutomationEventRecording
  Return type: void
  Description: Stop recording automation events
  No input parameters
Function 155: PlayAutomationEvent() (1 input parameters)
  Name: PlayAutomationEvent
  Return type: void
  Description: Play a recorded automation event
  Param[1]: event (type: AutomationEvent)
Function 156: IsKeyPressed() (1 input parameters)
  Name: IsKeyPressed
  Return type: bool
  Description: Check if a key has been pressed once
  Param[1]: key (type: int)
Function 157: IsKeyPressedRepeat() (1 input parameters)
  Name: IsKeyPressedRepeat
  Return type: bool
  Description: Check if a key has been pressed again (Only PLATFORM_DESKTOP)
  Param[1]: key (type: int)
Function 158: IsKeyDown() (1 input parameters)
  Name: IsKeyDown
  Return type: bool
  Description: Check if a key is being pressed
  Param[1]: key (type: int)
Function 159: IsKeyReleased() (1 input parameters)
  Name: IsKeyReleased
  Return type: bool
  Description: Check if a key has been released once
  Param[1]: key (type: int)
Function 160: IsKeyUp() (1 input parameters)
  Name: IsKeyUp
  Return type: bool
  Description: Check if a key is NOT being pressed
  Param[1]: key (type: int)
Function 161: GetKeyPressed() (0 input parameters)
  Name: GetKeyPressed
  Return type: int
  Description: Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
  No input parameters
Function 162: GetCharPressed() (0 input parameters)
  Name: GetCharPressed
  Return type: int
  Description: Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
  No input parameters
Function 163: SetExitKey() (1 input parameters)
  Name: SetExitKey
  Return type: void
  Description: Set a custom key to exit program (default is ESC)
  Param[1]: key (type: int)
Function 164: IsGamepadAvailable() (1 input parameters)
  Name: IsGamepadAvailable
  Return type: bool
  Description: Check if a gamepad is available
  Param[1]: gamepad (type: int)
Function 165: GetGamepadName() (1 input parameters)
  Name: GetGamepadName
  Return type: const char *
  Description: Get gamepad internal name id
  Param[1]: gamepad (type: int)
Function 166: IsGamepadButtonPressed() (2 input parameters)
  Name: IsGamepadButtonPressed
  Return type: bool
  Description: Check if a gamepad button has been pressed once
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 167: IsGamepadButtonDown() (2 input parameters)
  Name: IsGamepadButtonDown
  Return type: bool
  Description: Check if a gamepad button is being pressed
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 168: IsGamepadButtonReleased() (2 input parameters)
  Name: IsGamepadButtonReleased
  Return type: bool
  Description: Check if a gamepad button has been released once
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 169: IsGamepadButtonUp() (2 input parameters)
  Name: IsGamepadButtonUp
  Return type: bool
  Description: Check if a gamepad button is NOT being pressed
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 170: GetGamepadButtonPressed() (0 input parameters)
  Name: GetGamepadButtonPressed
  Return type: int
  Description: Get the last gamepad button pressed
  No input parameters
Function 171: GetGamepadAxisCount() (1 input parameters)
  Name: GetGamepadAxisCount
  Return type: int
  Description: Get gamepad axis count for a gamepad
  Param[1]: gamepad (type: int)
Function 172: GetGamepadAxisMovement() (2 input parameters)
  Name: GetGamepadAxisMovement
  Return type: float
  Description: Get axis movement value for a gamepad axis
  Param[1]: gamepad (type: int)
  Param[2]: axis (type: int)
Function 173: SetGamepadMappings() (1 input parameters)
  Name: SetGamepadMappings
  Return type: int
  Description: Set internal gamepad mappings (SDL_GameControllerDB)
  Param[1]: mappings (type: const char *)
Function 174: SetGamepadVibration() (3 input parameters)
  Name: SetGamepadVibration
  Return type: void
  Description: Set gamepad vibration for both motors
  Param[1]: gamepad (type: int)
  Param[2]: leftMotor (type: float)
  Param[3]: rightMotor (type: float)
Function 175: IsMouseButtonPressed() (1 input parameters)
  Name: IsMouseButtonPressed
  Return type: bool
  Description: Check if a mouse button has been pressed once
  Param[1]: button (type: int)
Function 176: IsMouseButtonDown() (1 input parameters)
  Name: IsMouseButtonDown
  Return type: bool
  Description: Check if a mouse button is being pressed
  Param[1]: button (type: int)
Function 177: IsMouseButtonReleased() (1 input parameters)
  Name: IsMouseButtonReleased
  Return type: bool
  Description: Check if a mouse button has been released once
  Param[1]: button (type: int)
Function 178: IsMouseButtonUp() (1 input parameters)
  Name: IsMouseButtonUp
  Return type: bool
  Description: Check if a mouse button is NOT being pressed
  Param[1]: button (type: int)
Function 179: GetMouseX() (0 input parameters)
  Name: GetMouseX
  Return type: int
  Description: Get mouse position X
  No input parameters
Function 180: GetMouseY() (0 input parameters)
  Name: GetMouseY
  Return type: int
  Description: Get mouse position Y
  No input parameters
Function 181: GetMousePosition() (0 input parameters)
  Name: GetMousePosition
  Return type: Vector2
  Description: Get mouse position XY
  No input parameters
Function 182: GetMouseDelta() (0 input parameters)
  Name: GetMouseDelta
  Return type: Vector2
  Description: Get mouse delta between frames
  No input parameters
Function 183: SetMousePosition() (2 input parameters)
  Name: SetMousePosition
  Return type: void
  Description: Set mouse position XY
  Param[1]: x (type: int)
  Param[2]: y (type: int)
Function 184: SetMouseOffset() (2 input parameters)
  Name: SetMouseOffset
  Return type: void
  Description: Set mouse offset
  Param[1]: offsetX (type: int)
  Param[2]: offsetY (type: int)
Function 185: SetMouseScale() (2 input parameters)
  Name: SetMouseScale
  Return type: void
  Description: Set mouse scaling
  Param[1]: scaleX (type: float)
  Param[2]: scaleY (type: float)
Function 186: GetMouseWheelMove() (0 input parameters)
  Name: GetMouseWheelMove
  Return type: float
  Description: Get mouse wheel movement for X or Y, whichever is larger
  No input parameters
Function 187: GetMouseWheelMoveV() (0 input parameters)
  Name: GetMouseWheelMoveV
  Return type: Vector2
  Description: Get mouse wheel movement for both X and Y
  No input parameters
Function 188: SetMouseCursor() (1 input parameters)
  Name: SetMouseCursor
  Return type: void
  Description: Set mouse cursor
  Param[1]: cursor (type: int)
Function 189: GetTouchX() (0 input parameters)
  Name: GetTouchX
  Return type: int
  Description: Get touch position X for touch point 0 (relative to screen size)
  No input parameters
Function 190: GetTouchY() (0 input parameters)
  Name: GetTouchY
  Return type: int
  Description: Get touch position Y for touch point 0 (relative to screen size)
  No input parameters
Function 191: GetTouchPosition() (1 input parameters)
  Name: GetTouchPosition
  Return type: Vector2
  Description: Get touch position XY for a touch point index (relative to screen size)
  Param[1]: index (type: int)
Function 192: GetTouchPointId() (1 input parameters)
  Name: GetTouchPointId
  Return type: int
  Description: Get touch point identifier for given index
  Param[1]: index (type: int)
Function 193: GetTouchPointCount() (0 input parameters)
  Name: GetTouchPointCount
  Return type: int
  Description: Get number of touch points
  No input parameters
Function 194: SetGesturesEnabled() (1 input parameters)
  Name: SetGesturesEnabled
  Return type: void
  Description: Enable a set of gestures using flags
  Param[1]: flags (type: unsigned int)
Function 195: IsGestureDetected() (1 input parameters)
  Name: IsGestureDetected
  Return type: bool
  Description: Check if a gesture have been detected
  Param[1]: gesture (type: unsigned int)
Function 196: GetGestureDetected() (0 input parameters)
  Name: GetGestureDetected
  Return type: int
  Description: Get latest detected gesture
  No input parameters
Function 197: GetGestureHoldDuration() (0 input parameters)
  Name: GetGestureHoldDuration
  Return type: float
  Description: Get gesture hold time in milliseconds
  No input parameters
Function 198: GetGestureDragVector() (0 input parameters)
  Name: GetGestureDragVector
  Return type: Vector2
  Description: Get gesture drag vector
  No input parameters
Function 199: GetGestureDragAngle() (0 input parameters)
  Name: GetGestureDragAngle
  Return type: float
  Description: Get gesture drag angle
  No input parameters
Function 200: GetGesturePinchVector() (0 input parameters)
  Name: GetGesturePinchVector
  Return type: Vector2
  Description: Get gesture pinch delta
  No input parameters
Function 201: GetGesturePinchAngle() (0 input parameters)
  Name: GetGesturePinchAngle
  Return type: float
  Description: Get gesture pinch angle
  No input parameters
Function 202: UpdateCamera() (2 input parameters)
  Name: UpdateCamera
  Return type: void
  Description: Update camera position for selected mode
  Param[1]: camera (type: Camera *)
  Param[2]: mode (type: int)
Function 203: UpdateCameraPro() (4 input parameters)
  Name: UpdateCameraPro
  Return type: void
  Description: Update camera movement/rotation
  Param[1]: camera (type: Camera *)
  Param[2]: movement (type: Vector3)
  Param[3]: rotation (type: Vector3)
  Param[4]: zoom (type: float)
Function 204: SetShapesTexture() (2 input parameters)
  Name: SetShapesTexture
  Return type: void
  Description: Set texture and rectangle to be used on shapes drawing
  Param[1]: texture (type: Texture2D)
  Param[2]: source (type: Rectangle)
Function 205: GetShapesTexture() (0 input parameters)
  Name: GetShapesTexture
  Return type: Texture2D
  Description: Get texture that is used for shapes drawing
  No input parameters
Function 206: GetShapesTextureRectangle() (0 input parameters)
  Name: GetShapesTextureRectangle
  Return type: Rectangle
  Description: Get texture source rectangle that is used for shapes drawing
  No input parameters
Function 207: DrawPixel() (3 input parameters)
  Name: DrawPixel
  Return type: void
  Description: Draw a pixel
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: color (type: Color)
Function 208: DrawPixelV() (2 input parameters)
  Name: DrawPixelV
  Return type: void
  Description: Draw a pixel (Vector version)
  Param[1]: position (type: Vector2)
  Param[2]: color (type: Color)
Function 209: DrawLine() (5 input parameters)
  Name: DrawLine
  Return type: void
  Description: Draw a line
  Param[1]: startPosX (type: int)
  Param[2]: startPosY (type: int)
  Param[3]: endPosX (type: int)
  Param[4]: endPosY (type: int)
  Param[5]: color (type: Color)
Function 210: DrawLineV() (3 input parameters)
  Name: DrawLineV
  Return type: void
  Description: Draw a line (using gl lines)
  Param[1]: startPos (type: Vector2)
  Param[2]: endPos (type: Vector2)
  Param[3]: color (type: Color)
Function 211: DrawLineEx() (4 input parameters)
  Name: DrawLineEx
  Return type: void
  Description: Draw a line (using triangles/quads)
  Param[1]: startPos (type: Vector2)
  Param[2]: endPos (type: Vector2)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 212: DrawLineStrip() (3 input parameters)
  Name: DrawLineStrip
  Return type: void
  Description: Draw lines sequence (using gl lines)
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: Color)
Function 213: DrawLineBezier() (4 input parameters)
  Name: DrawLineBezier
  Return type: void
  Description: Draw line segment cubic-bezier in-out interpolation
  Param[1]: startPos (type: Vector2)
  Param[2]: endPos (type: Vector2)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 214: DrawCircle() (4 input parameters)
  Name: DrawCircle
  Return type: void
  Description: Draw a color-filled circle
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radius (type: float)
  Param[4]: color (type: Color)
Function 215: DrawCircleSector() (6 input parameters)
  Name: DrawCircleSector
  Return type: void
  Description: Draw a piece of a circle
  Param[1]: center (type: Vector2)
  Param[2]: radius (type: float)
  Param[3]: startAngle (type: float)
  Param[4]: endAngle (type: float)
  Param[5]: segments (type: int)
  Param[6]: color (type: Color)
Function 216: DrawCircleSectorLines() (6 input parameters)
  Name: DrawCircleSectorLines
  Return type: void
  Description: Draw circle sector outline
  Param[1]: center (type: Vector2)
  Param[2]: radius (type: float)
  Param[3]: startAngle (type: float)
  Param[4]: endAngle (type: float)
  Param[5]: segments (type: int)
  Param[6]: color (type: Color)
Function 217: DrawCircleGradient() (5 input parameters)
  Name: DrawCircleGradient
  Return type: void
  Description: Draw a gradient-filled circle
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radius (type: float)
  Param[4]: color1 (type: Color)
  Param[5]: color2 (type: Color)
Function 218: DrawCircleV() (3 input parameters)
  Name: DrawCircleV
  Return type: void
  Description: Draw a color-filled circle (Vector version)
  Param[1]: center (type: Vector2)
  Param[2]: radius (type: float)
  Param[3]: color (type: Color)
Function 219: DrawCircleLines() (4 input parameters)
  Name: DrawCircleLines
  Return type: void
  Description: Draw circle outline
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radius (type: float)
  Param[4]: color (type: Color)
Function 220: DrawCircleLinesV() (3 input parameters)
  Name: DrawCircleLinesV
  Return type: void
  Description: Draw circle outline (Vector version)
  Param[1]: center (type: Vector2)
  Param[2]: radius (type: float)
  Param[3]: color (type: Color)
Function 221: DrawEllipse() (5 input parameters)
  Name: DrawEllipse
  Return type: void
  Description: Draw ellipse
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radiusH (type: float)
  Param[4]: radiusV (type: float)
  Param[5]: color (type: Color)
Function 222: DrawEllipseLines() (5 input parameters)
  Name: DrawEllipseLines
  Return type: void
  Description: Draw ellipse outline
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radiusH (type: float)
  Param[4]: radiusV (type: float)
  Param[5]: color (type: Color)
Function 223: DrawRing() (7 input parameters)
  Name: DrawRing
  Return type: void
  Description: Draw ring
  Param[1]: center (type: Vector2)
  Param[2]: innerRadius (type: float)
  Param[3]: outerRadius (type: float)
  Param[4]: startAngle (type: float)
  Param[5]: endAngle (type: float)
  Param[6]: segments (type: int)
  Param[7]: color (type: Color)
Function 224: DrawRingLines() (7 input parameters)
  Name: DrawRingLines
  Return type: void
  Description: Draw ring outline
  Param[1]: center (type: Vector2)
  Param[2]: innerRadius (type: float)
  Param[3]: outerRadius (type: float)
  Param[4]: startAngle (type: float)
  Param[5]: endAngle (type: float)
  Param[6]: segments (type: int)
  Param[7]: color (type: Color)
Function 225: DrawRectangle() (5 input parameters)
  Name: DrawRectangle
  Return type: void
  Description: Draw a color-filled rectangle
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: color (type: Color)
Function 226: DrawRectangleV() (3 input parameters)
  Name: DrawRectangleV
  Return type: void
  Description: Draw a color-filled rectangle (Vector version)
  Param[1]: position (type: Vector2)
  Param[2]: size (type: Vector2)
  Param[3]: color (type: Color)
Function 227: DrawRectangleRec() (2 input parameters)
  Name: DrawRectangleRec
  Return type: void
  Description: Draw a color-filled rectangle
  Param[1]: rec (type: Rectangle)
  Param[2]: color (type: Color)
Function 228: DrawRectanglePro() (4 input parameters)
  Name: DrawRectanglePro
  Return type: void
  Description: Draw a color-filled rectangle with pro parameters
  Param[1]: rec (type: Rectangle)
  Param[2]: origin (type: Vector2)
  Param[3]: rotation (type: float)
  Param[4]: color (type: Color)
Function 229: DrawRectangleGradientV() (6 input parameters)
  Name: DrawRectangleGradientV
  Return type: void
  Description: Draw a vertical-gradient-filled rectangle
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: color1 (type: Color)
  Param[6]: color2 (type: Color)
Function 230: DrawRectangleGradientH() (6 input parameters)
  Name: DrawRectangleGradientH
  Return type: void
  Description: Draw a horizontal-gradient-filled rectangle
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: color1 (type: Color)
  Param[6]: color2 (type: Color)
Function 231: DrawRectangleGradientEx() (5 input parameters)
  Name: DrawRectangleGradientEx
  Return type: void
  Description: Draw a gradient-filled rectangle with custom vertex colors
  Param[1]: rec (type: Rectangle)
  Param[2]: col1 (type: Color)
  Param[3]: col2 (type: Color)
  Param[4]: col3 (type: Color)
  Param[5]: col4 (type: Color)
Function 232: DrawRectangleLines() (5 input parameters)
  Name: DrawRectangleLines
  Return type: void
  Description: Draw rectangle outline
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: color (type: Color)
Function 233: DrawRectangleLinesEx() (3 input parameters)
  Name: DrawRectangleLinesEx
  Return type: void
  Description: Draw rectangle outline with extended parameters
  Param[1]: rec (type: Rectangle)
  Param[2]: lineThick (type: float)
  Param[3]: color (type: Color)
Function 234: DrawRectangleRounded() (4 input parameters)
  Name: DrawRectangleRounded
  Return type: void
  Description: Draw rectangle with rounded edges
  Param[1]: rec (type: Rectangle)
  Param[2]: roundness (type: float)
  Param[3]: segments (type: int)
  Param[4]: color (type: Color)
Function 235: DrawRectangleRoundedLines() (4 input parameters)
  Name: DrawRectangleRoundedLines
  Return type: void
  Description: Draw rectangle lines with rounded edges
  Param[1]: rec (type: Rectangle)
  Param[2]: roundness (type: float)
  Param[3]: segments (type: int)
  Param[4]: color (type: Color)
Function 236: DrawRectangleRoundedLinesEx() (5 input parameters)
  Name: DrawRectangleRoundedLinesEx
  Return type: void
  Description: Draw rectangle with rounded edges outline
  Param[1]: rec (type: Rectangle)
  Param[2]: roundness (type: float)
  Param[3]: segments (type: int)
  Param[4]: lineThick (type: float)
  Param[5]: color (type: Color)
Function 237: DrawTriangle() (4 input parameters)
  Name: DrawTriangle
  Return type: void
  Description: Draw a color-filled triangle (vertex in counter-clockwise order!)
  Param[1]: v1 (type: Vector2)
  Param[2]: v2 (type: Vector2)
  Param[3]: v3 (type: Vector2)
  Param[4]: color (type: Color)
Function 238: DrawTriangleLines() (4 input parameters)
  Name: DrawTriangleLines
  Return type: void
  Description: Draw triangle outline (vertex in counter-clockwise order!)
  Param[1]: v1 (type: Vector2)
  Param[2]: v2 (type: Vector2)
  Param[3]: v3 (type: Vector2)
  Param[4]: color (type: Color)
Function 239: DrawTriangleFan() (3 input parameters)
  Name: DrawTriangleFan
  Return type: void
  Description: Draw a triangle fan defined by points (first vertex is the center)
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: Color)
Function 240: DrawTriangleStrip() (3 input parameters)
  Name: DrawTriangleStrip
  Return type: void
  Description: Draw a triangle strip defined by points
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: Color)
Function 241: DrawPoly() (5 input parameters)
  Name: DrawPoly
  Return type: void
  Description: Draw a regular polygon (Vector version)
  Param[1]: center (type: Vector2)
  Param[2]: sides (type: int)
  Param[3]: radius (type: float)
  Param[4]: rotation (type: float)
  Param[5]: color (type: Color)
Function 242: DrawPolyLines() (5 input parameters)
  Name: DrawPolyLines
  Return type: void
  Description: Draw a polygon outline of n sides
  Param[1]: center (type: Vector2)
  Param[2]: sides (type: int)
  Param[3]: radius (type: float)
  Param[4]: rotation (type: float)
  Param[5]: color (type: Color)
Function 243: DrawPolyLinesEx() (6 input parameters)
  Name: DrawPolyLinesEx
  Return type: void
  Description: Draw a polygon outline of n sides with extended parameters
  Param[1]: center (type: Vector2)
  Param[2]: sides (type: int)
  Param[3]: radius (type: float)
  Param[4]: rotation (type: float)
  Param[5]: lineThick (type: float)
  Param[6]: color (type: Color)
Function 244: DrawSplineLinear() (4 input parameters)
  Name: DrawSplineLinear
  Return type: void
  Description: Draw spline: Linear, minimum 2 points
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 245: DrawSplineBasis() (4 input parameters)
  Name: DrawSplineBasis
  Return type: void
  Description: Draw spline: B-Spline, minimum 4 points
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 246: DrawSplineCatmullRom() (4 input parameters)
  Name: DrawSplineCatmullRom
  Return type: void
  Description: Draw spline: Catmull-Rom, minimum 4 points
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 247: DrawSplineBezierQuadratic() (4 input parameters)
  Name: DrawSplineBezierQuadratic
  Return type: void
  Description: Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 248: DrawSplineBezierCubic() (4 input parameters)
  Name: DrawSplineBezierCubic
  Return type: void
  Description: Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
  Param[1]: points (type: Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 249: DrawSplineSegmentLinear() (4 input parameters)
  Name: DrawSplineSegmentLinear
  Return type: void
  Description: Draw spline segment: Linear, 2 points
  Param[1]: p1 (type: Vector2)
  Param[2]: p2 (type: Vector2)
  Param[3]: thick (type: float)
  Param[4]: color (type: Color)
Function 250: DrawSplineSegmentBasis() (6 input parameters)
  Name: DrawSplineSegmentBasis
  Return type: void
  Description: Draw spline segment: B-Spline, 4 points
  Param[1]: p1 (type: Vector2)
  Param[2]: p2 (type: Vector2)
  Param[3]: p3 (type: Vector2)
  Param[4]: p4 (type: Vector2)
  Param[5]: thick (type: float)
  Param[6]: color (type: Color)
Function 251: DrawSplineSegmentCatmullRom() (6 input parameters)
  Name: DrawSplineSegmentCatmullRom
  Return type: void
  Description: Draw spline segment: Catmull-Rom, 4 points
  Param[1]: p1 (type: Vector2)
  Param[2]: p2 (type: Vector2)
  Param[3]: p3 (type: Vector2)
  Param[4]: p4 (type: Vector2)
  Param[5]: thick (type: float)
  Param[6]: color (type: Color)
Function 252: DrawSplineSegmentBezierQuadratic() (5 input parameters)
  Name: DrawSplineSegmentBezierQuadratic
  Return type: void
  Description: Draw spline segment: Quadratic Bezier, 2 points, 1 control point
  Param[1]: p1 (type: Vector2)
  Param[2]: c2 (type: Vector2)
  Param[3]: p3 (type: Vector2)
  Param[4]: thick (type: float)
  Param[5]: color (type: Color)
Function 253: DrawSplineSegmentBezierCubic() (6 input parameters)
  Name: DrawSplineSegmentBezierCubic
  Return type: void
  Description: Draw spline segment: Cubic Bezier, 2 points, 2 control points
  Param[1]: p1 (type: Vector2)
  Param[2]: c2 (type: Vector2)
  Param[3]: c3 (type: Vector2)
  Param[4]: p4 (type: Vector2)
  Param[5]: thick (type: float)
  Param[6]: color (type: Color)
Function 254: GetSplinePointLinear() (3 input parameters)
  Name: GetSplinePointLinear
  Return type: Vector2
  Description: Get (evaluate) spline point: Linear
  Param[1]: startPos (type: Vector2)
  Param[2]: endPos (type: Vector2)
  Param[3]: t (type: float)
Function 255: GetSplinePointBasis() (5 input parameters)
  Name: GetSplinePointBasis
  Return type: Vector2
  Description: Get (evaluate) spline point: B-Spline
  Param[1]: p1 (type: Vector2)
  Param[2]: p2 (type: Vector2)
  Param[3]: p3 (type: Vector2)
  Param[4]: p4 (type: Vector2)
  Param[5]: t (type: float)
Function 256: GetSplinePointCatmullRom() (5 input parameters)
  Name: GetSplinePointCatmullRom
  Return type: Vector2
  Description: Get (evaluate) spline point: Catmull-Rom
  Param[1]: p1 (type: Vector2)
  Param[2]: p2 (type: Vector2)
  Param[3]: p3 (type: Vector2)
  Param[4]: p4 (type: Vector2)
  Param[5]: t (type: float)
Function 257: GetSplinePointBezierQuad() (4 input parameters)
  Name: GetSplinePointBezierQuad
  Return type: Vector2
  Description: Get (evaluate) spline point: Quadratic Bezier
  Param[1]: p1 (type: Vector2)
  Param[2]: c2 (type: Vector2)
  Param[3]: p3 (type: Vector2)
  Param[4]: t (type: float)
Function 258: GetSplinePointBezierCubic() (5 input parameters)
  Name: GetSplinePointBezierCubic
  Return type: Vector2
  Description: Get (evaluate) spline point: Cubic Bezier
  Param[1]: p1 (type: Vector2)
  Param[2]: c2 (type: Vector2)
  Param[3]: c3 (type: Vector2)
  Param[4]: p4 (type: Vector2)
  Param[5]: t (type: float)
Function 259: CheckCollisionRecs() (2 input parameters)
  Name: CheckCollisionRecs
  Return type: bool
  Description: Check collision between two rectangles
  Param[1]: rec1 (type: Rectangle)
  Param[2]: rec2 (type: Rectangle)
Function 260: CheckCollisionCircles() (4 input parameters)
  Name: CheckCollisionCircles
  Return type: bool
  Description: Check collision between two circles
  Param[1]: center1 (type: Vector2)
  Param[2]: radius1 (type: float)
  Param[3]: center2 (type: Vector2)
  Param[4]: radius2 (type: float)
Function 261: CheckCollisionCircleRec() (3 input parameters)
  Name: CheckCollisionCircleRec
  Return type: bool
  Description: Check collision between circle and rectangle
  Param[1]: center (type: Vector2)
  Param[2]: radius (type: float)
  Param[3]: rec (type: Rectangle)
Function 262: CheckCollisionPointRec() (2 input parameters)
  Name: CheckCollisionPointRec
  Return type: bool
  Description: Check if point is inside rectangle
  Param[1]: point (type: Vector2)
  Param[2]: rec (type: Rectangle)
Function 263: CheckCollisionPointCircle() (3 input parameters)
  Name: CheckCollisionPointCircle
  Return type: bool
  Description: Check if point is inside circle
  Param[1]: point (type: Vector2)
  Param[2]: center (type: Vector2)
  Param[3]: radius (type: float)
Function 264: CheckCollisionPointTriangle() (4 input parameters)
  Name: CheckCollisionPointTriangle
  Return type: bool
  Description: Check if point is inside a triangle
  Param[1]: point (type: Vector2)
  Param[2]: p1 (type: Vector2)
  Param[3]: p2 (type: Vector2)
  Param[4]: p3 (type: Vector2)
Function 265: CheckCollisionPointPoly() (3 input parameters)
  Name: CheckCollisionPointPoly
  Return type: bool
  Description: Check if point is within a polygon described by array of vertices
  Param[1]: point (type: Vector2)
  Param[2]: points (type: Vector2 *)
  Param[3]: pointCount (type: int)
Function 266: CheckCollisionLines() (5 input parameters)
  Name: CheckCollisionLines
  Return type: bool
  Description: Check the collision between two lines defined by two points each, returns collision point by reference
  Param[1]: startPos1 (type: Vector2)
  Param[2]: endPos1 (type: Vector2)
  Param[3]: startPos2 (type: Vector2)
  Param[4]: endPos2 (type: Vector2)
  Param[5]: collisionPoint (type: Vector2 *)
Function 267: CheckCollisionPointLine() (4 input parameters)
  Name: CheckCollisionPointLine
  Return type: bool
  Description: Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
  Param[1]: point (type: Vector2)
  Param[2]: p1 (type: Vector2)
  Param[3]: p2 (type: Vector2)
  Param[4]: threshold (type: int)
Function 268: CheckCollisionCircleLine() (4 input parameters)
  Name: CheckCollisionCircleLine
  Return type: bool
  Description: Check if circle collides with a line created betweeen two points [p1] and [p2]
  Param[1]: center (type: Vector2)
  Param[2]: radius (type: float)
  Param[3]: p1 (type: Vector2)
  Param[4]: p2 (type: Vector2)
Function 269: GetCollisionRec() (2 input parameters)
  Name: GetCollisionRec
  Return type: Rectangle
  Description: Get collision rectangle for two rectangles collision
  Param[1]: rec1 (type: Rectangle)
  Param[2]: rec2 (type: Rectangle)
Function 270: LoadImage() (1 input parameters)
  Name: LoadImage
  Return type: Image
  Description: Load image from file into CPU memory (RAM)
  Param[1]: fileName (type: const char *)
Function 271: LoadImageRaw() (5 input parameters)
  Name: LoadImageRaw
  Return type: Image
  Description: Load image from RAW file data
  Param[1]: fileName (type: const char *)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
  Param[4]: format (type: int)
  Param[5]: headerSize (type: int)
Function 272: LoadImageSvg() (3 input parameters)
  Name: LoadImageSvg
  Return type: Image
  Description: Load image from SVG file data or string with specified size
  Param[1]: fileNameOrString (type: const char *)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
Function 273: LoadImageAnim() (2 input parameters)
  Name: LoadImageAnim
  Return type: Image
  Description: Load image sequence from file (frames appended to image.data)
  Param[1]: fileName (type: const char *)
  Param[2]: frames (type: int *)
Function 274: LoadImageAnimFromMemory() (4 input parameters)
  Name: LoadImageAnimFromMemory
  Return type: Image
  Description: Load image sequence from memory buffer
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
  Param[4]: frames (type: int *)
Function 275: LoadImageFromMemory() (3 input parameters)
  Name: LoadImageFromMemory
  Return type: Image
  Description: Load image from memory buffer, fileType refers to extension: i.e. '.png'
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
Function 276: LoadImageFromTexture() (1 input parameters)
  Name: LoadImageFromTexture
  Return type: Image
  Description: Load image from GPU texture data
  Param[1]: texture (type: Texture2D)
Function 277: LoadImageFromScreen() (0 input parameters)
  Name: LoadImageFromScreen
  Return type: Image
  Description: Load image from screen buffer and (screenshot)
  No input parameters
Function 278: IsImageReady() (1 input parameters)
  Name: IsImageReady
  Return type: bool
  Description: Check if an image is ready
  Param[1]: image (type: Image)
Function 279: UnloadImage() (1 input parameters)
  Name: UnloadImage
  Return type: void
  Description: Unload image from CPU memory (RAM)
  Param[1]: image (type: Image)
Function 280: ExportImage() (2 input parameters)
  Name: ExportImage
  Return type: bool
  Description: Export image data to file, returns true on success
  Param[1]: image (type: Image)
  Param[2]: fileName (type: const char *)
Function 281: ExportImageToMemory() (3 input parameters)
  Name: ExportImageToMemory
  Return type: unsigned char *
  Description: Export image to memory buffer
  Param[1]: image (type: Image)
  Param[2]: fileType (type: const char *)
  Param[3]: fileSize (type: int *)
Function 282: ExportImageAsCode() (2 input parameters)
  Name: ExportImageAsCode
  Return type: bool
  Description: Export image as code file defining an array of bytes, returns true on success
  Param[1]: image (type: Image)
  Param[2]: fileName (type: const char *)
Function 283: GenImageColor() (3 input parameters)
  Name: GenImageColor
  Return type: Image
  Description: Generate image: plain color
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: color (type: Color)
Function 284: GenImageGradientLinear() (5 input parameters)
  Name: GenImageGradientLinear
  Return type: Image
  Description: Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: direction (type: int)
  Param[4]: start (type: Color)
  Param[5]: end (type: Color)
Function 285: GenImageGradientRadial() (5 input parameters)
  Name: GenImageGradientRadial
  Return type: Image
  Description: Generate image: radial gradient
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: density (type: float)
  Param[4]: inner (type: Color)
  Param[5]: outer (type: Color)
Function 286: GenImageGradientSquare() (5 input parameters)
  Name: GenImageGradientSquare
  Return type: Image
  Description: Generate image: square gradient
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: density (type: float)
  Param[4]: inner (type: Color)
  Param[5]: outer (type: Color)
Function 287: GenImageChecked() (6 input parameters)
  Name: GenImageChecked
  Return type: Image
  Description: Generate image: checked
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: checksX (type: int)
  Param[4]: checksY (type: int)
  Param[5]: col1 (type: Color)
  Param[6]: col2 (type: Color)
Function 288: GenImageWhiteNoise() (3 input parameters)
  Name: GenImageWhiteNoise
  Return type: Image
  Description: Generate image: white noise
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: factor (type: float)
Function 289: GenImagePerlinNoise() (5 input parameters)
  Name: GenImagePerlinNoise
  Return type: Image
  Description: Generate image: perlin noise
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: offsetX (type: int)
  Param[4]: offsetY (type: int)
  Param[5]: scale (type: float)
Function 290: GenImageCellular() (3 input parameters)
  Name: GenImageCellular
  Return type: Image
  Description: Generate image: cellular algorithm, bigger tileSize means bigger cells
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: tileSize (type: int)
Function 291: GenImageText() (3 input parameters)
  Name: GenImageText
  Return type: Image
  Description: Generate image: grayscale image from text data
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: text (type: const char *)
Function 292: ImageCopy() (1 input parameters)
  Name: ImageCopy
  Return type: Image
  Description: Create an image duplicate (useful for transformations)
  Param[1]: image (type: Image)
Function 293: ImageFromImage() (2 input parameters)
  Name: ImageFromImage
  Return type: Image
  Description: Create an image from another image piece
  Param[1]: image (type: Image)
  Param[2]: rec (type: Rectangle)
Function 294: ImageText() (3 input parameters)
  Name: ImageText
  Return type: Image
  Description: Create an image from text (default font)
  Param[1]: text (type: const char *)
  Param[2]: fontSize (type: int)
  Param[3]: color (type: Color)
Function 295: ImageTextEx() (5 input parameters)
  Name: ImageTextEx
  Return type: Image
  Description: Create an image from text (custom sprite font)
  Param[1]: font (type: Font)
  Param[2]: text (type: const char *)
  Param[3]: fontSize (type: float)
  Param[4]: spacing (type: float)
  Param[5]: tint (type: Color)
Function 296: ImageFormat() (2 input parameters)
  Name: ImageFormat
  Return type: void
  Description: Convert image data to desired format
  Param[1]: image (type: Image *)
  Param[2]: newFormat (type: int)
Function 297: ImageToPOT() (2 input parameters)
  Name: ImageToPOT
  Return type: void
  Description: Convert image to POT (power-of-two)
  Param[1]: image (type: Image *)
  Param[2]: fill (type: Color)
Function 298: ImageCrop() (2 input parameters)
  Name: ImageCrop
  Return type: void
  Description: Crop an image to a defined rectangle
  Param[1]: image (type: Image *)
  Param[2]: crop (type: Rectangle)
Function 299: ImageAlphaCrop() (2 input parameters)
  Name: ImageAlphaCrop
  Return type: void
  Description: Crop image depending on alpha value
  Param[1]: image (type: Image *)
  Param[2]: threshold (type: float)
Function 300: ImageAlphaClear() (3 input parameters)
  Name: ImageAlphaClear
  Return type: void
  Description: Clear alpha channel to desired color
  Param[1]: image (type: Image *)
  Param[2]: color (type: Color)
  Param[3]: threshold (type: float)
Function 301: ImageAlphaMask() (2 input parameters)
  Name: ImageAlphaMask
  Return type: void
  Description: Apply alpha mask to image
  Param[1]: image (type: Image *)
  Param[2]: alphaMask (type: Image)
Function 302: ImageAlphaPremultiply() (1 input parameters)
  Name: ImageAlphaPremultiply
  Return type: void
  Description: Premultiply alpha channel
  Param[1]: image (type: Image *)
Function 303: ImageBlurGaussian() (2 input parameters)
  Name: ImageBlurGaussian
  Return type: void
  Description: Apply Gaussian blur using a box blur approximation
  Param[1]: image (type: Image *)
  Param[2]: blurSize (type: int)
Function 304: ImageKernelConvolution() (3 input parameters)
  Name: ImageKernelConvolution
  Return type: void
  Description: Apply Custom Square image convolution kernel
  Param[1]: image (type: Image *)
  Param[2]: kernel (type: float *)
  Param[3]: kernelSize (type: int)
Function 305: ImageResize() (3 input parameters)
  Name: ImageResize
  Return type: void
  Description: Resize image (Bicubic scaling algorithm)
  Param[1]: image (type: Image *)
  Param[2]: newWidth (type: int)
  Param[3]: newHeight (type: int)
Function 306: ImageResizeNN() (3 input parameters)
  Name: ImageResizeNN
  Return type: void
  Description: Resize image (Nearest-Neighbor scaling algorithm)
  Param[1]: image (type: Image *)
  Param[2]: newWidth (type: int)
  Param[3]: newHeight (type: int)
Function 307: ImageResizeCanvas() (6 input parameters)
  Name: ImageResizeCanvas
  Return type: void
  Description: Resize canvas and fill with color
  Param[1]: image (type: Image *)
  Param[2]: newWidth (type: int)
  Param[3]: newHeight (type: int)
  Param[4]: offsetX (type: int)
  Param[5]: offsetY (type: int)
  Param[6]: fill (type: Color)
Function 308: ImageMipmaps() (1 input parameters)
  Name: ImageMipmaps
  Return type: void
  Description: Compute all mipmap levels for a provided image
  Param[1]: image (type: Image *)
Function 309: ImageDither() (5 input parameters)
  Name: ImageDither
  Return type: void
  Description: Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
  Param[1]: image (type: Image *)
  Param[2]: rBpp (type: int)
  Param[3]: gBpp (type: int)
  Param[4]: bBpp (type: int)
  Param[5]: aBpp (type: int)
Function 310: ImageFlipVertical() (1 input parameters)
  Name: ImageFlipVertical
  Return type: void
  Description: Flip image vertically
  Param[1]: image (type: Image *)
Function 311: ImageFlipHorizontal() (1 input parameters)
  Name: ImageFlipHorizontal
  Return type: void
  Description: Flip image horizontally
  Param[1]: image (type: Image *)
Function 312: ImageRotate() (2 input parameters)
  Name: ImageRotate
  Return type: void
  Description: Rotate image by input angle in degrees (-359 to 359)
  Param[1]: image (type: Image *)
  Param[2]: degrees (type: int)
Function 313: ImageRotateCW() (1 input parameters)
  Name: ImageRotateCW
  Return type: void
  Description: Rotate image clockwise 90deg
  Param[1]: image (type: Image *)
Function 314: ImageRotateCCW() (1 input parameters)
  Name: ImageRotateCCW
  Return type: void
  Description: Rotate image counter-clockwise 90deg
  Param[1]: image (type: Image *)
Function 315: ImageColorTint() (2 input parameters)
  Name: ImageColorTint
  Return type: void
  Description: Modify image color: tint
  Param[1]: image (type: Image *)
  Param[2]: color (type: Color)
Function 316: ImageColorInvert() (1 input parameters)
  Name: ImageColorInvert
  Return type: void
  Description: Modify image color: invert
  Param[1]: image (type: Image *)
Function 317: ImageColorGrayscale() (1 input parameters)
  Name: ImageColorGrayscale
  Return type: void
  Description: Modify image color: grayscale
  Param[1]: image (type: Image *)
Function 318: ImageColorContrast() (2 input parameters)
  Name: ImageColorContrast
  Return type: void
  Description: Modify image color: contrast (-100 to 100)
  Param[1]: image (type: Image *)
  Param[2]: contrast (type: float)
Function 319: ImageColorBrightness() (2 input parameters)
  Name: ImageColorBrightness
  Return type: void
  Description: Modify image color: brightness (-255 to 255)
  Param[1]: image (type: Image *)
  Param[2]: brightness (type: int)
Function 320: ImageColorReplace() (3 input parameters)
  Name: ImageColorReplace
  Return type: void
  Description: Modify image color: replace color
  Param[1]: image (type: Image *)
  Param[2]: color (type: Color)
  Param[3]: replace (type: Color)
Function 321: LoadImageColors() (1 input parameters)
  Name: LoadImageColors
  Return type: Color *
  Description: Load color data from image as a Color array (RGBA - 32bit)
  Param[1]: image (type: Image)
Function 322: LoadImagePalette() (3 input parameters)
  Name: LoadImagePalette
  Return type: Color *
  Description: Load colors palette from image as a Color array (RGBA - 32bit)
  Param[1]: image (type: Image)
  Param[2]: maxPaletteSize (type: int)
  Param[3]: colorCount (type: int *)
Function 323: UnloadImageColors() (1 input parameters)
  Name: UnloadImageColors
  Return type: void
  Description: Unload color data loaded with LoadImageColors()
  Param[1]: colors (type: Color *)
Function 324: UnloadImagePalette() (1 input parameters)
  Name: UnloadImagePalette
  Return type: void
  Description: Unload colors palette loaded with LoadImagePalette()
  Param[1]: colors (type: Color *)
Function 325: GetImageAlphaBorder() (2 input parameters)
  Name: GetImageAlphaBorder
  Return type: Rectangle
  Description: Get image alpha border rectangle
  Param[1]: image (type: Image)
  Param[2]: threshold (type: float)
Function 326: GetImageColor() (3 input parameters)
  Name: GetImageColor
  Return type: Color
  Description: Get image pixel color at (x, y) position
  Param[1]: image (type: Image)
  Param[2]: x (type: int)
  Param[3]: y (type: int)
Function 327: ImageClearBackground() (2 input parameters)
  Name: ImageClearBackground
  Return type: void
  Description: Clear image background with given color
  Param[1]: dst (type: Image *)
  Param[2]: color (type: Color)
Function 328: ImageDrawPixel() (4 input parameters)
  Name: ImageDrawPixel
  Return type: void
  Description: Draw pixel within an image
  Param[1]: dst (type: Image *)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: color (type: Color)
Function 329: ImageDrawPixelV() (3 input parameters)
  Name: ImageDrawPixelV
  Return type: void
  Description: Draw pixel within an image (Vector version)
  Param[1]: dst (type: Image *)
  Param[2]: position (type: Vector2)
  Param[3]: color (type: Color)
Function 330: ImageDrawLine() (6 input parameters)
  Name: ImageDrawLine
  Return type: void
  Description: Draw line within an image
  Param[1]: dst (type: Image *)
  Param[2]: startPosX (type: int)
  Param[3]: startPosY (type: int)
  Param[4]: endPosX (type: int)
  Param[5]: endPosY (type: int)
  Param[6]: color (type: Color)
Function 331: ImageDrawLineV() (4 input parameters)
  Name: ImageDrawLineV
  Return type: void
  Description: Draw line within an image (Vector version)
  Param[1]: dst (type: Image *)
  Param[2]: start (type: Vector2)
  Param[3]: end (type: Vector2)
  Param[4]: color (type: Color)
Function 332: ImageDrawCircle() (5 input parameters)
  Name: ImageDrawCircle
  Return type: void
  Description: Draw a filled circle within an image
  Param[1]: dst (type: Image *)
  Param[2]: centerX (type: int)
  Param[3]: centerY (type: int)
  Param[4]: radius (type: int)
  Param[5]: color (type: Color)
Function 333: ImageDrawCircleV() (4 input parameters)
  Name: ImageDrawCircleV
  Return type: void
  Description: Draw a filled circle within an image (Vector version)
  Param[1]: dst (type: Image *)
  Param[2]: center (type: Vector2)
  Param[3]: radius (type: int)
  Param[4]: color (type: Color)
Function 334: ImageDrawCircleLines() (5 input parameters)
  Name: ImageDrawCircleLines
  Return type: void
  Description: Draw circle outline within an image
  Param[1]: dst (type: Image *)
  Param[2]: centerX (type: int)
  Param[3]: centerY (type: int)
  Param[4]: radius (type: int)
  Param[5]: color (type: Color)
Function 335: ImageDrawCircleLinesV() (4 input parameters)
  Name: ImageDrawCircleLinesV
  Return type: void
  Description: Draw circle outline within an image (Vector version)
  Param[1]: dst (type: Image *)
  Param[2]: center (type: Vector2)
  Param[3]: radius (type: int)
  Param[4]: color (type: Color)
Function 336: ImageDrawRectangle() (6 input parameters)
  Name: ImageDrawRectangle
  Return type: void
  Description: Draw rectangle within an image
  Param[1]: dst (type: Image *)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: width (type: int)
  Param[5]: height (type: int)
  Param[6]: color (type: Color)
Function 337: ImageDrawRectangleV() (4 input parameters)
  Name: ImageDrawRectangleV
  Return type: void
  Description: Draw rectangle within an image (Vector version)
  Param[1]: dst (type: Image *)
  Param[2]: position (type: Vector2)
  Param[3]: size (type: Vector2)
  Param[4]: color (type: Color)
Function 338: ImageDrawRectangleRec() (3 input parameters)
  Name: ImageDrawRectangleRec
  Return type: void
  Description: Draw rectangle within an image
  Param[1]: dst (type: Image *)
  Param[2]: rec (type: Rectangle)
  Param[3]: color (type: Color)
Function 339: ImageDrawRectangleLines() (4 input parameters)
  Name: ImageDrawRectangleLines
  Return type: void
  Description: Draw rectangle lines within an image
  Param[1]: dst (type: Image *)
  Param[2]: rec (type: Rectangle)
  Param[3]: thick (type: int)
  Param[4]: color (type: Color)
Function 340: ImageDraw() (5 input parameters)
  Name: ImageDraw
  Return type: void
  Description: Draw a source image within a destination image (tint applied to source)
  Param[1]: dst (type: Image *)
  Param[2]: src (type: Image)
  Param[3]: srcRec (type: Rectangle)
  Param[4]: dstRec (type: Rectangle)
  Param[5]: tint (type: Color)
Function 341: ImageDrawText() (6 input parameters)
  Name: ImageDrawText
  Return type: void
  Description: Draw text (using default font) within an image (destination)
  Param[1]: dst (type: Image *)
  Param[2]: text (type: const char *)
  Param[3]: posX (type: int)
  Param[4]: posY (type: int)
  Param[5]: fontSize (type: int)
  Param[6]: color (type: Color)
Function 342: ImageDrawTextEx() (7 input parameters)
  Name: ImageDrawTextEx
  Return type: void
  Description: Draw text (custom sprite font) within an image (destination)
  Param[1]: dst (type: Image *)
  Param[2]: font (type: Font)
  Param[3]: text (type: const char *)
  Param[4]: position (type: Vector2)
  Param[5]: fontSize (type: float)
  Param[6]: spacing (type: float)
  Param[7]: tint (type: Color)
Function 343: LoadTexture() (1 input parameters)
  Name: LoadTexture
  Return type: Texture2D
  Description: Load texture from file into GPU memory (VRAM)
  Param[1]: fileName (type: const char *)
Function 344: LoadTextureFromImage() (1 input parameters)
  Name: LoadTextureFromImage
  Return type: Texture2D
  Description: Load texture from image data
  Param[1]: image (type: Image)
Function 345: LoadTextureCubemap() (2 input parameters)
  Name: LoadTextureCubemap
  Return type: TextureCubemap
  Description: Load cubemap from image, multiple image cubemap layouts supported
  Param[1]: image (type: Image)
  Param[2]: layout (type: int)
Function 346: LoadRenderTexture() (2 input parameters)
  Name: LoadRenderTexture
  Return type: RenderTexture2D
  Description: Load texture for rendering (framebuffer)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 347: IsTextureReady() (1 input parameters)
  Name: IsTextureReady
  Return type: bool
  Description: Check if a texture is ready
  Param[1]: texture (type: Texture2D)
Function 348: UnloadTexture() (1 input parameters)
  Name: UnloadTexture
  Return type: void
  Description: Unload texture from GPU memory (VRAM)
  Param[1]: texture (type: Texture2D)
Function 349: IsRenderTextureReady() (1 input parameters)
  Name: IsRenderTextureReady
  Return type: bool
  Description: Check if a render texture is ready
  Param[1]: target (type: RenderTexture2D)
Function 350: UnloadRenderTexture() (1 input parameters)
  Name: UnloadRenderTexture
  Return type: void
  Description: Unload render texture from GPU memory (VRAM)
  Param[1]: target (type: RenderTexture2D)
Function 351: UpdateTexture() (2 input parameters)
  Name: UpdateTexture
  Return type: void
  Description: Update GPU texture with new data
  Param[1]: texture (type: Texture2D)
  Param[2]: pixels (type: const void *)
Function 352: UpdateTextureRec() (3 input parameters)
  Name: UpdateTextureRec
  Return type: void
  Description: Update GPU texture rectangle with new data
  Param[1]: texture (type: Texture2D)
  Param[2]: rec (type: Rectangle)
  Param[3]: pixels (type: const void *)
Function 353: GenTextureMipmaps() (1 input parameters)
  Name: GenTextureMipmaps
  Return type: void
  Description: Generate GPU mipmaps for a texture
  Param[1]: texture (type: Texture2D *)
Function 354: SetTextureFilter() (2 input parameters)
  Name: SetTextureFilter
  Return type: void
  Description: Set texture scaling filter mode
  Param[1]: texture (type: Texture2D)
  Param[2]: filter (type: int)
Function 355: SetTextureWrap() (2 input parameters)
  Name: SetTextureWrap
  Return type: void
  Description: Set texture wrapping mode
  Param[1]: texture (type: Texture2D)
  Param[2]: wrap (type: int)
Function 356: DrawTexture() (4 input parameters)
  Name: DrawTexture
  Return type: void
  Description: Draw a Texture2D
  Param[1]: texture (type: Texture2D)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: tint (type: Color)
Function 357: DrawTextureV() (3 input parameters)
  Name: DrawTextureV
  Return type: void
  Description: Draw a Texture2D with position defined as Vector2
  Param[1]: texture (type: Texture2D)
  Param[2]: position (type: Vector2)
  Param[3]: tint (type: Color)
Function 358: DrawTextureEx() (5 input parameters)
  Name: DrawTextureEx
  Return type: void
  Description: Draw a Texture2D with extended parameters
  Param[1]: texture (type: Texture2D)
  Param[2]: position (type: Vector2)
  Param[3]: rotation (type: float)
  Param[4]: scale (type: float)
  Param[5]: tint (type: Color)
Function 359: DrawTextureRec() (4 input parameters)
  Name: DrawTextureRec
  Return type: void
  Description: Draw a part of a texture defined by a rectangle
  Param[1]: texture (type: Texture2D)
  Param[2]: source (type: Rectangle)
  Param[3]: position (type: Vector2)
  Param[4]: tint (type: Color)
Function 360: DrawTexturePro() (6 input parameters)
  Name: DrawTexturePro
  Return type: void
  Description: Draw a part of a texture defined by a rectangle with 'pro' parameters
  Param[1]: texture (type: Texture2D)
  Param[2]: source (type: Rectangle)
  Param[3]: dest (type: Rectangle)
  Param[4]: origin (type: Vector2)
  Param[5]: rotation (type: float)
  Param[6]: tint (type: Color)
Function 361: DrawTextureNPatch() (6 input parameters)
  Name: DrawTextureNPatch
  Return type: void
  Description: Draws a texture (or part of it) that stretches or shrinks nicely
  Param[1]: texture (type: Texture2D)
  Param[2]: nPatchInfo (type: NPatchInfo)
  Param[3]: dest (type: Rectangle)
  Param[4]: origin (type: Vector2)
  Param[5]: rotation (type: float)
  Param[6]: tint (type: Color)
Function 362: ColorIsEqual() (2 input parameters)
  Name: ColorIsEqual
  Return type: bool
  Description: Check if two colors are equal
  Param[1]: col1 (type: Color)
  Param[2]: col2 (type: Color)
Function 363: Fade() (2 input parameters)
  Name: Fade
  Return type: Color
  Description: Get color with alpha applied, alpha goes from 0.0f to 1.0f
  Param[1]: color (type: Color)
  Param[2]: alpha (type: float)
Function 364: ColorToInt() (1 input parameters)
  Name: ColorToInt
  Return type: int
  Description: Get hexadecimal value for a Color (0xRRGGBBAA)
  Param[1]: color (type: Color)
Function 365: ColorNormalize() (1 input parameters)
  Name: ColorNormalize
  Return type: Vector4
  Description: Get Color normalized as float [0..1]
  Param[1]: color (type: Color)
Function 366: ColorFromNormalized() (1 input parameters)
  Name: ColorFromNormalized
  Return type: Color
  Description: Get Color from normalized values [0..1]
  Param[1]: normalized (type: Vector4)
Function 367: ColorToHSV() (1 input parameters)
  Name: ColorToHSV
  Return type: Vector3
  Description: Get HSV values for a Color, hue [0..360], saturation/value [0..1]
  Param[1]: color (type: Color)
Function 368: ColorFromHSV() (3 input parameters)
  Name: ColorFromHSV
  Return type: Color
  Description: Get a Color from HSV values, hue [0..360], saturation/value [0..1]
  Param[1]: hue (type: float)
  Param[2]: saturation (type: float)
  Param[3]: value (type: float)
Function 369: ColorTint() (2 input parameters)
  Name: ColorTint
  Return type: Color
  Description: Get color multiplied with another color
  Param[1]: color (type: Color)
  Param[2]: tint (type: Color)
Function 370: ColorBrightness() (2 input parameters)
  Name: ColorBrightness
  Return type: Color
  Description: Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
  Param[1]: color (type: Color)
  Param[2]: factor (type: float)
Function 371: ColorContrast() (2 input parameters)
  Name: ColorContrast
  Return type: Color
  Description: Get color with contrast correction, contrast values between -1.0f and 1.0f
  Param[1]: color (type: Color)
  Param[2]: contrast (type: float)
Function 372: ColorAlpha() (2 input parameters)
  Name: ColorAlpha
  Return type: Color
  Description: Get color with alpha applied, alpha goes from 0.0f to 1.0f
  Param[1]: color (type: Color)
  Param[2]: alpha (type: float)
Function 373: ColorAlphaBlend() (3 input parameters)
  Name: ColorAlphaBlend
  Return type: Color
  Description: Get src alpha-blended into dst color with tint
  Param[1]: dst (type: Color)
  Param[2]: src (type: Color)
  Param[3]: tint (type: Color)
Function 374: GetColor() (1 input parameters)
  Name: GetColor
  Return type: Color
  Description: Get Color structure from hexadecimal value
  Param[1]: hexValue (type: unsigned int)
Function 375: GetPixelColor() (2 input parameters)
  Name: GetPixelColor
  Return type: Color
  Description: Get Color from a source pixel pointer of certain format
  Param[1]: srcPtr (type: void *)
  Param[2]: format (type: int)
Function 376: SetPixelColor() (3 input parameters)
  Name: SetPixelColor
  Return type: void
  Description: Set color formatted into destination pixel pointer
  Param[1]: dstPtr (type: void *)
  Param[2]: color (type: Color)
  Param[3]: format (type: int)
Function 377: GetPixelDataSize() (3 input parameters)
  Name: GetPixelDataSize
  Return type: int
  Description: Get pixel data size in bytes for certain format
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: format (type: int)
Function 378: GetFontDefault() (0 input parameters)
  Name: GetFontDefault
  Return type: Font
  Description: Get the default Font
  No input parameters
Function 379: LoadFont() (1 input parameters)
  Name: LoadFont
  Return type: Font
  Description: Load font from file into GPU memory (VRAM)
  Param[1]: fileName (type: const char *)
Function 380: LoadFontEx() (4 input parameters)
  Name: LoadFontEx
  Return type: Font
  Description: Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character setFont
  Param[1]: fileName (type: const char *)
  Param[2]: fontSize (type: int)
  Param[3]: codepoints (type: int *)
  Param[4]: codepointCount (type: int)
Function 381: LoadFontFromImage() (3 input parameters)
  Name: LoadFontFromImage
  Return type: Font
  Description: Load font from Image (XNA style)
  Param[1]: image (type: Image)
  Param[2]: key (type: Color)
  Param[3]: firstChar (type: int)
Function 382: LoadFontFromMemory() (6 input parameters)
  Name: LoadFontFromMemory
  Return type: Font
  Description: Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
  Param[4]: fontSize (type: int)
  Param[5]: codepoints (type: int *)
  Param[6]: codepointCount (type: int)
Function 383: IsFontReady() (1 input parameters)
  Name: IsFontReady
  Return type: bool
  Description: Check if a font is ready
  Param[1]: font (type: Font)
Function 384: LoadFontData() (6 input parameters)
  Name: LoadFontData
  Return type: GlyphInfo *
  Description: Load font data for further use
  Param[1]: fileData (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: fontSize (type: int)
  Param[4]: codepoints (type: int *)
  Param[5]: codepointCount (type: int)
  Param[6]: type (type: int)
Function 385: GenImageFontAtlas() (6 input parameters)
  Name: GenImageFontAtlas
  Return type: Image
  Description: Generate image font atlas using chars info
  Param[1]: glyphs (type: const GlyphInfo *)
  Param[2]: glyphRecs (type: Rectangle **)
  Param[3]: glyphCount (type: int)
  Param[4]: fontSize (type: int)
  Param[5]: padding (type: int)
  Param[6]: packMethod (type: int)
Function 386: UnloadFontData() (2 input parameters)
  Name: UnloadFontData
  Return type: void
  Description: Unload font chars info data (RAM)
  Param[1]: glyphs (type: GlyphInfo *)
  Param[2]: glyphCount (type: int)
Function 387: UnloadFont() (1 input parameters)
  Name: UnloadFont
  Return type: void
  Description: Unload font from GPU memory (VRAM)
  Param[1]: font (type: Font)
Function 388: ExportFontAsCode() (2 input parameters)
  Name: ExportFontAsCode
  Return type: bool
  Description: Export font as code file, returns true on success
  Param[1]: font (type: Font)
  Param[2]: fileName (type: const char *)
Function 389: DrawFPS() (2 input parameters)
  Name: DrawFPS
  Return type: void
  Description: Draw current FPS
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
Function 390: DrawText() (5 input parameters)
  Name: DrawText
  Return type: void
  Description: Draw text (using default font)
  Param[1]: text (type: const char *)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: fontSize (type: int)
  Param[5]: color (type: Color)
Function 391: DrawTextEx() (6 input parameters)
  Name: DrawTextEx
  Return type: void
  Description: Draw text using font and additional parameters
  Param[1]: font (type: Font)
  Param[2]: text (type: const char *)
  Param[3]: position (type: Vector2)
  Param[4]: fontSize (type: float)
  Param[5]: spacing (type: float)
  Param[6]: tint (type: Color)
Function 392: DrawTextPro() (8 input parameters)
  Name: DrawTextPro
  Return type: void
  Description: Draw text using Font and pro parameters (rotation)
  Param[1]: font (type: Font)
  Param[2]: text (type: const char *)
  Param[3]: position (type: Vector2)
  Param[4]: origin (type: Vector2)
  Param[5]: rotation (type: float)
  Param[6]: fontSize (type: float)
  Param[7]: spacing (type: float)
  Param[8]: tint (type: Color)
Function 393: DrawTextCodepoint() (5 input parameters)
  Name: DrawTextCodepoint
  Return type: void
  Description: Draw one character (codepoint)
  Param[1]: font (type: Font)
  Param[2]: codepoint (type: int)
  Param[3]: position (type: Vector2)
  Param[4]: fontSize (type: float)
  Param[5]: tint (type: Color)
Function 394: DrawTextCodepoints() (7 input parameters)
  Name: DrawTextCodepoints
  Return type: void
  Description: Draw multiple character (codepoint)
  Param[1]: font (type: Font)
  Param[2]: codepoints (type: const int *)
  Param[3]: codepointCount (type: int)
  Param[4]: position (type: Vector2)
  Param[5]: fontSize (type: float)
  Param[6]: spacing (type: float)
  Param[7]: tint (type: Color)
Function 395: SetTextLineSpacing() (1 input parameters)
  Name: SetTextLineSpacing
  Return type: void
  Description: Set vertical line spacing when drawing with line-breaks
  Param[1]: spacing (type: int)
Function 396: MeasureText() (2 input parameters)
  Name: MeasureText
  Return type: int
  Description: Measure string width for default font
  Param[1]: text (type: const char *)
  Param[2]: fontSize (type: int)
Function 397: MeasureTextEx() (4 input parameters)
  Name: MeasureTextEx
  Return type: Vector2
  Description: Measure string size for Font
  Param[1]: font (type: Font)
  Param[2]: text (type: const char *)
  Param[3]: fontSize (type: float)
  Param[4]: spacing (type: float)
Function 398: GetGlyphIndex() (2 input parameters)
  Name: GetGlyphIndex
  Return type: int
  Description: Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
  Param[1]: font (type: Font)
  Param[2]: codepoint (type: int)
Function 399: GetGlyphInfo() (2 input parameters)
  Name: GetGlyphInfo
  Return type: GlyphInfo
  Description: Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
  Param[1]: font (type: Font)
  Param[2]: codepoint (type: int)
Function 400: GetGlyphAtlasRec() (2 input parameters)
  Name: GetGlyphAtlasRec
  Return type: Rectangle
  Description: Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
  Param[1]: font (type: Font)
  Param[2]: codepoint (type: int)
Function 401: LoadUTF8() (2 input parameters)
  Name: LoadUTF8
  Return type: char *
  Description: Load UTF-8 text encoded from codepoints array
  Param[1]: codepoints (type: const int *)
  Param[2]: length (type: int)
Function 402: UnloadUTF8() (1 input parameters)
  Name: UnloadUTF8
  Return type: void
  Description: Unload UTF-8 text encoded from codepoints array
  Param[1]: text (type: char *)
Function 403: LoadCodepoints() (2 input parameters)
  Name: LoadCodepoints
  Return type: int *
  Description: Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
  Param[1]: text (type: const char *)
  Param[2]: count (type: int *)
Function 404: UnloadCodepoints() (1 input parameters)
  Name: UnloadCodepoints
  Return type: void
  Description: Unload codepoints data from memory
  Param[1]: codepoints (type: int *)
Function 405: GetCodepointCount() (1 input parameters)
  Name: GetCodepointCount
  Return type: int
  Description: Get total number of codepoints in a UTF-8 encoded string
  Param[1]: text (type: const char *)
Function 406: GetCodepoint() (2 input parameters)
  Name: GetCodepoint
  Return type: int
  Description: Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
  Param[1]: text (type: const char *)
  Param[2]: codepointSize (type: int *)
Function 407: GetCodepointNext() (2 input parameters)
  Name: GetCodepointNext
  Return type: int
  Description: Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
  Param[1]: text (type: const char *)
  Param[2]: codepointSize (type: int *)
Function 408: GetCodepointPrevious() (2 input parameters)
  Name: GetCodepointPrevious
  Return type: int
  Description: Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
  Param[1]: text (type: const char *)
  Param[2]: codepointSize (type: int *)
Function 409: CodepointToUTF8() (2 input parameters)
  Name: CodepointToUTF8
  Return type: const char *
  Description: Encode one codepoint into UTF-8 byte array (array length returned as parameter)
  Param[1]: codepoint (type: int)
  Param[2]: utf8Size (type: int *)
Function 410: TextCopy() (2 input parameters)
  Name: TextCopy
  Return type: int
  Description: Copy one string to another, returns bytes copied
  Param[1]: dst (type: char *)
  Param[2]: src (type: const char *)
Function 411: TextIsEqual() (2 input parameters)
  Name: TextIsEqual
  Return type: bool
  Description: Check if two text string are equal
  Param[1]: text1 (type: const char *)
  Param[2]: text2 (type: const char *)
Function 412: TextLength() (1 input parameters)
  Name: TextLength
  Return type: unsigned int
  Description: Get text length, checks for '\0' ending
  Param[1]: text (type: const char *)
Function 413: TextFormat() (2 input parameters)
  Name: TextFormat
  Return type: const char *
  Description: Text formatting with variables (sprintf() style)
  Param[1]: text (type: const char *)
  Param[2]: args (type: ...)
Function 414: TextSubtext() (3 input parameters)
  Name: TextSubtext
  Return type: const char *
  Description: Get a piece of a text string
  Param[1]: text (type: const char *)
  Param[2]: position (type: int)
  Param[3]: length (type: int)
Function 415: TextReplace() (3 input parameters)
  Name: TextReplace
  Return type: char *
  Description: Replace text string (WARNING: memory must be freed!)
  Param[1]: text (type: const char *)
  Param[2]: replace (type: const char *)
  Param[3]: by (type: const char *)
Function 416: TextInsert() (3 input parameters)
  Name: TextInsert
  Return type: char *
  Description: Insert text in a position (WARNING: memory must be freed!)
  Param[1]: text (type: const char *)
  Param[2]: insert (type: const char *)
  Param[3]: position (type: int)
Function 417: TextJoin() (3 input parameters)
  Name: TextJoin
  Return type: const char *
  Description: Join text strings with delimiter
  Param[1]: textList (type: const char **)
  Param[2]: count (type: int)
  Param[3]: delimiter (type: const char *)
Function 418: TextSplit() (3 input parameters)
  Name: TextSplit
  Return type: const char **
  Description: Split text into multiple strings
  Param[1]: text (type: const char *)
  Param[2]: delimiter (type: char)
  Param[3]: count (type: int *)
Function 419: TextAppend() (3 input parameters)
  Name: TextAppend
  Return type: void
  Description: Append text at specific position and move cursor!
  Param[1]: text (type: char *)
  Param[2]: append (type: const char *)
  Param[3]: position (type: int *)
Function 420: TextFindIndex() (2 input parameters)
  Name: TextFindIndex
  Return type: int
  Description: Find first text occurrence within a string
  Param[1]: text (type: const char *)
  Param[2]: find (type: const char *)
Function 421: TextToUpper() (1 input parameters)
  Name: TextToUpper
  Return type: const char *
  Description: Get upper case version of provided string
  Param[1]: text (type: const char *)
Function 422: TextToLower() (1 input parameters)
  Name: TextToLower
  Return type: const char *
  Description: Get lower case version of provided string
  Param[1]: text (type: const char *)
Function 423: TextToPascal() (1 input parameters)
  Name: TextToPascal
  Return type: const char *
  Description: Get Pascal case notation version of provided string
  Param[1]: text (type: const char *)
Function 424: TextToSnake() (1 input parameters)
  Name: TextToSnake
  Return type: const char *
  Description: Get Snake case notation version of provided string
  Param[1]: text (type: const char *)
Function 425: TextToCamel() (1 input parameters)
  Name: TextToCamel
  Return type: const char *
  Description: Get Camel case notation version of provided string
  Param[1]: text (type: const char *)
Function 426: TextToInteger() (1 input parameters)
  Name: TextToInteger
  Return type: int
  Description: Get integer value from text (negative values not supported)
  Param[1]: text (type: const char *)
Function 427: TextToFloat() (1 input parameters)
  Name: TextToFloat
  Return type: float
  Description: Get float value from text (negative values not supported)
  Param[1]: text (type: const char *)
Function 428: DrawLine3D() (3 input parameters)
  Name: DrawLine3D
  Return type: void
  Description: Draw a line in 3D world space
  Param[1]: startPos (type: Vector3)
  Param[2]: endPos (type: Vector3)
  Param[3]: color (type: Color)
Function 429: DrawPoint3D() (2 input parameters)
  Name: DrawPoint3D
  Return type: void
  Description: Draw a point in 3D space, actually a small line
  Param[1]: position (type: Vector3)
  Param[2]: color (type: Color)
Function 430: DrawCircle3D() (5 input parameters)
  Name: DrawCircle3D
  Return type: void
  Description: Draw a circle in 3D world space
  Param[1]: center (type: Vector3)
  Param[2]: radius (type: float)
  Param[3]: rotationAxis (type: Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: color (type: Color)
Function 431: DrawTriangle3D() (4 input parameters)
  Name: DrawTriangle3D
  Return type: void
  Description: Draw a color-filled triangle (vertex in counter-clockwise order!)
  Param[1]: v1 (type: Vector3)
  Param[2]: v2 (type: Vector3)
  Param[3]: v3 (type: Vector3)
  Param[4]: color (type: Color)
Function 432: DrawTriangleStrip3D() (3 input parameters)
  Name: DrawTriangleStrip3D
  Return type: void
  Description: Draw a triangle strip defined by points
  Param[1]: points (type: Vector3 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: Color)
Function 433: DrawCube() (5 input parameters)
  Name: DrawCube
  Return type: void
  Description: Draw cube
  Param[1]: position (type: Vector3)
  Param[2]: width (type: float)
  Param[3]: height (type: float)
  Param[4]: length (type: float)
  Param[5]: color (type: Color)
Function 434: DrawCubeV() (3 input parameters)
  Name: DrawCubeV
  Return type: void
  Description: Draw cube (Vector version)
  Param[1]: position (type: Vector3)
  Param[2]: size (type: Vector3)
  Param[3]: color (type: Color)
Function 435: DrawCubeWires() (5 input parameters)
  Name: DrawCubeWires
  Return type: void
  Description: Draw cube wires
  Param[1]: position (type: Vector3)
  Param[2]: width (type: float)
  Param[3]: height (type: float)
  Param[4]: length (type: float)
  Param[5]: color (type: Color)
Function 436: DrawCubeWiresV() (3 input parameters)
  Name: DrawCubeWiresV
  Return type: void
  Description: Draw cube wires (Vector version)
  Param[1]: position (type: Vector3)
  Param[2]: size (type: Vector3)
  Param[3]: color (type: Color)
Function 437: DrawSphere() (3 input parameters)
  Name: DrawSphere
  Return type: void
  Description: Draw sphere
  Param[1]: centerPos (type: Vector3)
  Param[2]: radius (type: float)
  Param[3]: color (type: Color)
Function 438: DrawSphereEx() (5 input parameters)
  Name: DrawSphereEx
  Return type: void
  Description: Draw sphere with extended parameters
  Param[1]: centerPos (type: Vector3)
  Param[2]: radius (type: float)
  Param[3]: rings (type: int)
  Param[4]: slices (type: int)
  Param[5]: color (type: Color)
Function 439: DrawSphereWires() (5 input parameters)
  Name: DrawSphereWires
  Return type: void
  Description: Draw sphere wires
  Param[1]: centerPos (type: Vector3)
  Param[2]: radius (type: float)
  Param[3]: rings (type: int)
  Param[4]: slices (type: int)
  Param[5]: color (type: Color)
Function 440: DrawCylinder() (6 input parameters)
  Name: DrawCylinder
  Return type: void
  Description: Draw a cylinder/cone
  Param[1]: position (type: Vector3)
  Param[2]: radiusTop (type: float)
  Param[3]: radiusBottom (type: float)
  Param[4]: height (type: float)
  Param[5]: slices (type: int)
  Param[6]: color (type: Color)
Function 441: DrawCylinderEx() (6 input parameters)
  Name: DrawCylinderEx
  Return type: void
  Description: Draw a cylinder with base at startPos and top at endPos
  Param[1]: startPos (type: Vector3)
  Param[2]: endPos (type: Vector3)
  Param[3]: startRadius (type: float)
  Param[4]: endRadius (type: float)
  Param[5]: sides (type: int)
  Param[6]: color (type: Color)
Function 442: DrawCylinderWires() (6 input parameters)
  Name: DrawCylinderWires
  Return type: void
  Description: Draw a cylinder/cone wires
  Param[1]: position (type: Vector3)
  Param[2]: radiusTop (type: float)
  Param[3]: radiusBottom (type: float)
  Param[4]: height (type: float)
  Param[5]: slices (type: int)
  Param[6]: color (type: Color)
Function 443: DrawCylinderWiresEx() (6 input parameters)
  Name: DrawCylinderWiresEx
  Return type: void
  Description: Draw a cylinder wires with base at startPos and top at endPos
  Param[1]: startPos (type: Vector3)
  Param[2]: endPos (type: Vector3)
  Param[3]: startRadius (type: float)
  Param[4]: endRadius (type: float)
  Param[5]: sides (type: int)
  Param[6]: color (type: Color)
Function 444: DrawCapsule() (6 input parameters)
  Name: DrawCapsule
  Return type: void
  Description: Draw a capsule with the center of its sphere caps at startPos and endPos
  Param[1]: startPos (type: Vector3)
  Param[2]: endPos (type: Vector3)
  Param[3]: radius (type: float)
  Param[4]: slices (type: int)
  Param[5]: rings (type: int)
  Param[6]: color (type: Color)
Function 445: DrawCapsuleWires() (6 input parameters)
  Name: DrawCapsuleWires
  Return type: void
  Description: Draw capsule wireframe with the center of its sphere caps at startPos and endPos
  Param[1]: startPos (type: Vector3)
  Param[2]: endPos (type: Vector3)
  Param[3]: radius (type: float)
  Param[4]: slices (type: int)
  Param[5]: rings (type: int)
  Param[6]: color (type: Color)
Function 446: DrawPlane() (3 input parameters)
  Name: DrawPlane
  Return type: void
  Description: Draw a plane XZ
  Param[1]: centerPos (type: Vector3)
  Param[2]: size (type: Vector2)
  Param[3]: color (type: Color)
Function 447: DrawRay() (2 input parameters)
  Name: DrawRay
  Return type: void
  Description: Draw a ray line
  Param[1]: ray (type: Ray)
  Param[2]: color (type: Color)
Function 448: DrawGrid() (2 input parameters)
  Name: DrawGrid
  Return type: void
  Description: Draw a grid (centered at (0, 0, 0))
  Param[1]: slices (type: int)
  Param[2]: spacing (type: float)
Function 449: LoadModel() (1 input parameters)
  Name: LoadModel
  Return type: Model
  Description: Load model from files (meshes and materials)
  Param[1]: fileName (type: const char *)
Function 450: LoadModelFromMesh() (1 input parameters)
  Name: LoadModelFromMesh
  Return type: Model
  Description: Load model from generated mesh (default material)
  Param[1]: mesh (type: Mesh)
Function 451: IsModelReady() (1 input parameters)
  Name: IsModelReady
  Return type: bool
  Description: Check if a model is ready
  Param[1]: model (type: Model)
Function 452: UnloadModel() (1 input parameters)
  Name: UnloadModel
  Return type: void
  Description: Unload model (including meshes) from memory (RAM and/or VRAM)
  Param[1]: model (type: Model)
Function 453: GetModelBoundingBox() (1 input parameters)
  Name: GetModelBoundingBox
  Return type: BoundingBox
  Description: Compute model bounding box limits (considers all meshes)
  Param[1]: model (type: Model)
Function 454: DrawModel() (4 input parameters)
  Name: DrawModel
  Return type: void
  Description: Draw a model (with texture if set)
  Param[1]: model (type: Model)
  Param[2]: position (type: Vector3)
  Param[3]: scale (type: float)
  Param[4]: tint (type: Color)
Function 455: DrawModelEx() (6 input parameters)
  Name: DrawModelEx
  Return type: void
  Description: Draw a model with extended parameters
  Param[1]: model (type: Model)
  Param[2]: position (type: Vector3)
  Param[3]: rotationAxis (type: Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: scale (type: Vector3)
  Param[6]: tint (type: Color)
Function 456: DrawModelWires() (4 input parameters)
  Name: DrawModelWires
  Return type: void
  Description: Draw a model wires (with texture if set)
  Param[1]: model (type: Model)
  Param[2]: position (type: Vector3)
  Param[3]: scale (type: float)
  Param[4]: tint (type: Color)
Function 457: DrawModelWiresEx() (6 input parameters)
  Name: DrawModelWiresEx
  Return type: void
  Description: Draw a model wires (with texture if set) with extended parameters
  Param[1]: model (type: Model)
  Param[2]: position (type: Vector3)
  Param[3]: rotationAxis (type: Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: scale (type: Vector3)
  Param[6]: tint (type: Color)
Function 458: DrawBoundingBox() (2 input parameters)
  Name: DrawBoundingBox
  Return type: void
  Description: Draw bounding box (wires)
  Param[1]: box (type: BoundingBox)
  Param[2]: color (type: Color)
Function 459: DrawBillboard() (5 input parameters)
  Name: DrawBillboard
  Return type: void
  Description: Draw a billboard texture
  Param[1]: camera (type: Camera)
  Param[2]: texture (type: Texture2D)
  Param[3]: position (type: Vector3)
  Param[4]: size (type: float)
  Param[5]: tint (type: Color)
Function 460: DrawBillboardRec() (6 input parameters)
  Name: DrawBillboardRec
  Return type: void
  Description: Draw a billboard texture defined by source
  Param[1]: camera (type: Camera)
  Param[2]: texture (type: Texture2D)
  Param[3]: source (type: Rectangle)
  Param[4]: position (type: Vector3)
  Param[5]: size (type: Vector2)
  Param[6]: tint (type: Color)
Function 461: DrawBillboardPro() (9 input parameters)
  Name: DrawBillboardPro
  Return type: void
  Description: Draw a billboard texture defined by source and rotation
  Param[1]: camera (type: Camera)
  Param[2]: texture (type: Texture2D)
  Param[3]: source (type: Rectangle)
  Param[4]: position (type: Vector3)
  Param[5]: up (type: Vector3)
  Param[6]: size (type: Vector2)
  Param[7]: origin (type: Vector2)
  Param[8]: rotation (type: float)
  Param[9]: tint (type: Color)
Function 462: UploadMesh() (2 input parameters)
  Name: UploadMesh
  Return type: void
  Description: Upload mesh vertex data in GPU and provide VAO/VBO ids
  Param[1]: mesh (type: Mesh *)
  Param[2]: dynamic (type: bool)
Function 463: UpdateMeshBuffer() (5 input parameters)
  Name: UpdateMeshBuffer
  Return type: void
  Description: Update mesh vertex data in GPU for a specific buffer index
  Param[1]: mesh (type: Mesh)
  Param[2]: index (type: int)
  Param[3]: data (type: const void *)
  Param[4]: dataSize (type: int)
  Param[5]: offset (type: int)
Function 464: UnloadMesh() (1 input parameters)
  Name: UnloadMesh
  Return type: void
  Description: Unload mesh data from CPU and GPU
  Param[1]: mesh (type: Mesh)
Function 465: DrawMesh() (3 input parameters)
  Name: DrawMesh
  Return type: void
  Description: Draw a 3d mesh with material and transform
  Param[1]: mesh (type: Mesh)
  Param[2]: material (type: Material)
  Param[3]: transform (type: Matrix)
Function 466: DrawMeshInstanced() (4 input parameters)
  Name: DrawMeshInstanced
  Return type: void
  Description: Draw multiple mesh instances with material and different transforms
  Param[1]: mesh (type: Mesh)
  Param[2]: material (type: Material)
  Param[3]: transforms (type: const Matrix *)
  Param[4]: instances (type: int)
Function 467: GetMeshBoundingBox() (1 input parameters)
  Name: GetMeshBoundingBox
  Return type: BoundingBox
  Description: Compute mesh bounding box limits
  Param[1]: mesh (type: Mesh)
Function 468: GenMeshTangents() (1 input parameters)
  Name: GenMeshTangents
  Return type: void
  Description: Compute mesh tangents
  Param[1]: mesh (type: Mesh *)
Function 469: ExportMesh() (2 input parameters)
  Name: ExportMesh
  Return type: bool
  Description: Export mesh data to file, returns true on success
  Param[1]: mesh (type: Mesh)
  Param[2]: fileName (type: const char *)
Function 470: ExportMeshAsCode() (2 input parameters)
  Name: ExportMeshAsCode
  Return type: bool
  Description: Export mesh as code file (.h) defining multiple arrays of vertex attributes
  Param[1]: mesh (type: Mesh)
  Param[2]: fileName (type: const char *)
Function 471: GenMeshPoly() (2 input parameters)
  Name: GenMeshPoly
  Return type: Mesh
  Description: Generate polygonal mesh
  Param[1]: sides (type: int)
  Param[2]: radius (type: float)
Function 472: GenMeshPlane() (4 input parameters)
  Name: GenMeshPlane
  Return type: Mesh
  Description: Generate plane mesh (with subdivisions)
  Param[1]: width (type: float)
  Param[2]: length (type: float)
  Param[3]: resX (type: int)
  Param[4]: resZ (type: int)
Function 473: GenMeshCube() (3 input parameters)
  Name: GenMeshCube
  Return type: Mesh
  Description: Generate cuboid mesh
  Param[1]: width (type: float)
  Param[2]: height (type: float)
  Param[3]: length (type: float)
Function 474: GenMeshSphere() (3 input parameters)
  Name: GenMeshSphere
  Return type: Mesh
  Description: Generate sphere mesh (standard sphere)
  Param[1]: radius (type: float)
  Param[2]: rings (type: int)
  Param[3]: slices (type: int)
Function 475: GenMeshHemiSphere() (3 input parameters)
  Name: GenMeshHemiSphere
  Return type: Mesh
  Description: Generate half-sphere mesh (no bottom cap)
  Param[1]: radius (type: float)
  Param[2]: rings (type: int)
  Param[3]: slices (type: int)
Function 476: GenMeshCylinder() (3 input parameters)
  Name: GenMeshCylinder
  Return type: Mesh
  Description: Generate cylinder mesh
  Param[1]: radius (type: float)
  Param[2]: height (type: float)
  Param[3]: slices (type: int)
Function 477: GenMeshCone() (3 input parameters)
  Name: GenMeshCone
  Return type: Mesh
  Description: Generate cone/pyramid mesh
  Param[1]: radius (type: float)
  Param[2]: height (type: float)
  Param[3]: slices (type: int)
Function 478: GenMeshTorus() (4 input parameters)
  Name: GenMeshTorus
  Return type: Mesh
  Description: Generate torus mesh
  Param[1]: radius (type: float)
  Param[2]: size (type: float)
  Param[3]: radSeg (type: int)
  Param[4]: sides (type: int)
Function 479: GenMeshKnot() (4 input parameters)
  Name: GenMeshKnot
  Return type: Mesh
  Description: Generate trefoil knot mesh
  Param[1]: radius (type: float)
  Param[2]: size (type: float)
  Param[3]: radSeg (type: int)
  Param[4]: sides (type: int)
Function 480: GenMeshHeightmap() (2 input parameters)
  Name: GenMeshHeightmap
  Return type: Mesh
  Description: Generate heightmap mesh from image data
  Param[1]: heightmap (type: Image)
  Param[2]: size (type: Vector3)
Function 481: GenMeshCubicmap() (2 input parameters)
  Name: GenMeshCubicmap
  Return type: Mesh
  Description: Generate cubes-based map mesh from image data
  Param[1]: cubicmap (type: Image)
  Param[2]: cubeSize (type: Vector3)
Function 482: LoadMaterials() (2 input parameters)
  Name: LoadMaterials
  Return type: Material *
  Description: Load materials from model file
  Param[1]: fileName (type: const char *)
  Param[2]: materialCount (type: int *)
Function 483: LoadMaterialDefault() (0 input parameters)
  Name: LoadMaterialDefault
  Return type: Material
  Description: Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
  No input parameters
Function 484: IsMaterialReady() (1 input parameters)
  Name: IsMaterialReady
  Return type: bool
  Description: Check if a material is ready
  Param[1]: material (type: Material)
Function 485: UnloadMaterial() (1 input parameters)
  Name: UnloadMaterial
  Return type: void
  Description: Unload material from GPU memory (VRAM)
  Param[1]: material (type: Material)
Function 486: SetMaterialTexture() (3 input parameters)
  Name: SetMaterialTexture
  Return type: void
  Description: Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
  Param[1]: material (type: Material *)
  Param[2]: mapType (type: int)
  Param[3]: texture (type: Texture2D)
Function 487: SetModelMeshMaterial() (3 input parameters)
  Name: SetModelMeshMaterial
  Return type: void
  Description: Set material for a mesh
  Param[1]: model (type: Model *)
  Param[2]: meshId (type: int)
  Param[3]: materialId (type: int)
Function 488: LoadModelAnimations() (2 input parameters)
  Name: LoadModelAnimations
  Return type: ModelAnimation *
  Description: Load model animations from file
  Param[1]: fileName (type: const char *)
  Param[2]: animCount (type: int *)
Function 489: UpdateModelAnimation() (3 input parameters)
  Name: UpdateModelAnimation
  Return type: void
  Description: Update model animation pose
  Param[1]: model (type: Model)
  Param[2]: anim (type: ModelAnimation)
  Param[3]: frame (type: int)
Function 490: UnloadModelAnimation() (1 input parameters)
  Name: UnloadModelAnimation
  Return type: void
  Description: Unload animation data
  Param[1]: anim (type: ModelAnimation)
Function 491: UnloadModelAnimations() (2 input parameters)
  Name: UnloadModelAnimations
  Return type: void
  Description: Unload animation array data
  Param[1]: animations (type: ModelAnimation *)
  Param[2]: animCount (type: int)
Function 492: IsModelAnimationValid() (2 input parameters)
  Name: IsModelAnimationValid
  Return type: bool
  Description: Check model animation skeleton match
  Param[1]: model (type: Model)
  Param[2]: anim (type: ModelAnimation)
Function 493: CheckCollisionSpheres() (4 input parameters)
  Name: CheckCollisionSpheres
  Return type: bool
  Description: Check collision between two spheres
  Param[1]: center1 (type: Vector3)
  Param[2]: radius1 (type: float)
  Param[3]: center2 (type: Vector3)
  Param[4]: radius2 (type: float)
Function 494: CheckCollisionBoxes() (2 input parameters)
  Name: CheckCollisionBoxes
  Return type: bool
  Description: Check collision between two bounding boxes
  Param[1]: box1 (type: BoundingBox)
  Param[2]: box2 (type: BoundingBox)
Function 495: CheckCollisionBoxSphere() (3 input parameters)
  Name: CheckCollisionBoxSphere
  Return type: bool
  Description: Check collision between box and sphere
  Param[1]: box (type: BoundingBox)
  Param[2]: center (type: Vector3)
  Param[3]: radius (type: float)
Function 496: GetRayCollisionSphere() (3 input parameters)
  Name: GetRayCollisionSphere
  Return type: RayCollision
  Description: Get collision info between ray and sphere
  Param[1]: ray (type: Ray)
  Param[2]: center (type: Vector3)
  Param[3]: radius (type: float)
Function 497: GetRayCollisionBox() (2 input parameters)
  Name: GetRayCollisionBox
  Return type: RayCollision
  Description: Get collision info between ray and box
  Param[1]: ray (type: Ray)
  Param[2]: box (type: BoundingBox)
Function 498: GetRayCollisionMesh() (3 input parameters)
  Name: GetRayCollisionMesh
  Return type: RayCollision
  Description: Get collision info between ray and mesh
  Param[1]: ray (type: Ray)
  Param[2]: mesh (type: Mesh)
  Param[3]: transform (type: Matrix)
Function 499: GetRayCollisionTriangle() (4 input parameters)
  Name: GetRayCollisionTriangle
  Return type: RayCollision
  Description: Get collision info between ray and triangle
  Param[1]: ray (type: Ray)
  Param[2]: p1 (type: Vector3)
  Param[3]: p2 (type: Vector3)
  Param[4]: p3 (type: Vector3)
Function 500: GetRayCollisionQuad() (5 input parameters)
  Name: GetRayCollisionQuad
  Return type: RayCollision
  Description: Get collision info between ray and quad
  Param[1]: ray (type: Ray)
  Param[2]: p1 (type: Vector3)
  Param[3]: p2 (type: Vector3)
  Param[4]: p3 (type: Vector3)
  Param[5]: p4 (type: Vector3)
Function 501: InitAudioDevice() (0 input parameters)
  Name: InitAudioDevice
  Return type: void
  Description: Initialize audio device and context
  No input parameters
Function 502: CloseAudioDevice() (0 input parameters)
  Name: CloseAudioDevice
  Return type: void
  Description: Close the audio device and context
  No input parameters
Function 503: IsAudioDeviceReady() (0 input parameters)
  Name: IsAudioDeviceReady
  Return type: bool
  Description: Check if audio device has been initialized successfully
  No input parameters
Function 504: SetMasterVolume() (1 input parameters)
  Name: SetMasterVolume
  Return type: void
  Description: Set master volume (listener)
  Param[1]: volume (type: float)
Function 505: GetMasterVolume() (0 input parameters)
  Name: GetMasterVolume
  Return type: float
  Description: Get master volume (listener)
  No input parameters
Function 506: LoadWave() (1 input parameters)
  Name: LoadWave
  Return type: Wave
  Description: Load wave data from file
  Param[1]: fileName (type: const char *)
Function 507: LoadWaveFromMemory() (3 input parameters)
  Name: LoadWaveFromMemory
  Return type: Wave
  Description: Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
Function 508: IsWaveReady() (1 input parameters)
  Name: IsWaveReady
  Return type: bool
  Description: Checks if wave data is ready
  Param[1]: wave (type: Wave)
Function 509: LoadSound() (1 input parameters)
  Name: LoadSound
  Return type: Sound
  Description: Load sound from file
  Param[1]: fileName (type: const char *)
Function 510: LoadSoundFromWave() (1 input parameters)
  Name: LoadSoundFromWave
  Return type: Sound
  Description: Load sound from wave data
  Param[1]: wave (type: Wave)
Function 511: LoadSoundAlias() (1 input parameters)
  Name: LoadSoundAlias
  Return type: Sound
  Description: Create a new sound that shares the same sample data as the source sound, does not own the sound data
  Param[1]: source (type: Sound)
Function 512: IsSoundReady() (1 input parameters)
  Name: IsSoundReady
  Return type: bool
  Description: Checks if a sound is ready
  Param[1]: sound (type: Sound)
Function 513: UpdateSound() (3 input parameters)
  Name: UpdateSound
  Return type: void
  Description: Update sound buffer with new data
  Param[1]: sound (type: Sound)
  Param[2]: data (type: const void *)
  Param[3]: sampleCount (type: int)
Function 514: UnloadWave() (1 input parameters)
  Name: UnloadWave
  Return type: void
  Description: Unload wave data
  Param[1]: wave (type: Wave)
Function 515: UnloadSound() (1 input parameters)
  Name: UnloadSound
  Return type: void
  Description: Unload sound
  Param[1]: sound (type: Sound)
Function 516: UnloadSoundAlias() (1 input parameters)
  Name: UnloadSoundAlias
  Return type: void
  Description: Unload a sound alias (does not deallocate sample data)
  Param[1]: alias (type: Sound)
Function 517: ExportWave() (2 input parameters)
  Name: ExportWave
  Return type: bool
  Description: Export wave data to file, returns true on success
  Param[1]: wave (type: Wave)
  Param[2]: fileName (type: const char *)
Function 518: ExportWaveAsCode() (2 input parameters)
  Name: ExportWaveAsCode
  Return type: bool
  Description: Export wave sample data to code (.h), returns true on success
  Param[1]: wave (type: Wave)
  Param[2]: fileName (type: const char *)
Function 519: PlaySound() (1 input parameters)
  Name: PlaySound
  Return type: void
  Description: Play a sound
  Param[1]: sound (type: Sound)
Function 520: StopSound() (1 input parameters)
  Name: StopSound
  Return type: void
  Description: Stop playing a sound
  Param[1]: sound (type: Sound)
Function 521: PauseSound() (1 input parameters)
  Name: PauseSound
  Return type: void
  Description: Pause a sound
  Param[1]: sound (type: Sound)
Function 522: ResumeSound() (1 input parameters)
  Name: ResumeSound
  Return type: void
  Description: Resume a paused sound
  Param[1]: sound (type: Sound)
Function 523: IsSoundPlaying() (1 input parameters)
  Name: IsSoundPlaying
  Return type: bool
  Description: Check if a sound is currently playing
  Param[1]: sound (type: Sound)
Function 524: SetSoundVolume() (2 input parameters)
  Name: SetSoundVolume
  Return type: void
  Description: Set volume for a sound (1.0 is max level)
  Param[1]: sound (type: Sound)
  Param[2]: volume (type: float)
Function 525: SetSoundPitch() (2 input parameters)
  Name: SetSoundPitch
  Return type: void
  Description: Set pitch for a sound (1.0 is base level)
  Param[1]: sound (type: Sound)
  Param[2]: pitch (type: float)
Function 526: SetSoundPan() (2 input parameters)
  Name: SetSoundPan
  Return type: void
  Description: Set pan for a sound (0.5 is center)
  Param[1]: sound (type: Sound)
  Param[2]: pan (type: float)
Function 527: WaveCopy() (1 input parameters)
  Name: WaveCopy
  Return type: Wave
  Description: Copy a wave to a new wave
  Param[1]: wave (type: Wave)
Function 528: WaveCrop() (3 input parameters)
  Name: WaveCrop
  Return type: void
  Description: Crop a wave to defined frames range
  Param[1]: wave (type: Wave *)
  Param[2]: initFrame (type: int)
  Param[3]: finalFrame (type: int)
Function 529: WaveFormat() (4 input parameters)
  Name: WaveFormat
  Return type: void
  Description: Convert wave data to desired format
  Param[1]: wave (type: Wave *)
  Param[2]: sampleRate (type: int)
  Param[3]: sampleSize (type: int)
  Param[4]: channels (type: int)
Function 530: LoadWaveSamples() (1 input parameters)
  Name: LoadWaveSamples
  Return type: float *
  Description: Load samples data from wave as a 32bit float data array
  Param[1]: wave (type: Wave)
Function 531: UnloadWaveSamples() (1 input parameters)
  Name: UnloadWaveSamples
  Return type: void
  Description: Unload samples data loaded with LoadWaveSamples()
  Param[1]: samples (type: float *)
Function 532: LoadMusicStream() (1 input parameters)
  Name: LoadMusicStream
  Return type: Music
  Description: Load music stream from file
  Param[1]: fileName (type: const char *)
Function 533: LoadMusicStreamFromMemory() (3 input parameters)
  Name: LoadMusicStreamFromMemory
  Return type: Music
  Description: Load music stream from data
  Param[1]: fileType (type: const char *)
  Param[2]: data (type: const unsigned char *)
  Param[3]: dataSize (type: int)
Function 534: IsMusicReady() (1 input parameters)
  Name: IsMusicReady
  Return type: bool
  Description: Checks if a music stream is ready
  Param[1]: music (type: Music)
Function 535: UnloadMusicStream() (1 input parameters)
  Name: UnloadMusicStream
  Return type: void
  Description: Unload music stream
  Param[1]: music (type: Music)
Function 536: PlayMusicStream() (1 input parameters)
  Name: PlayMusicStream
  Return type: void
  Description: Start music playing
  Param[1]: music (type: Music)
Function 537: IsMusicStreamPlaying() (1 input parameters)
  Name: IsMusicStreamPlaying
  Return type: bool
  Description: Check if music is playing
  Param[1]: music (type: Music)
Function 538: UpdateMusicStream() (1 input parameters)
  Name: UpdateMusicStream
  Return type: void
  Description: Updates buffers for music streaming
  Param[1]: music (type: Music)
Function 539: StopMusicStream() (1 input parameters)
  Name: StopMusicStream
  Return type: void
  Description: Stop music playing
  Param[1]: music (type: Music)
Function 540: PauseMusicStream() (1 input parameters)
  Name: PauseMusicStream
  Return type: void
  Description: Pause music playing
  Param[1]: music (type: Music)
Function 541: ResumeMusicStream() (1 input parameters)
  Name: ResumeMusicStream
  Return type: void
  Description: Resume playing paused music
  Param[1]: music (type: Music)
Function 542: SeekMusicStream() (2 input parameters)
  Name: SeekMusicStream
  Return type: void
  Description: Seek music to a position (in seconds)
  Param[1]: music (type: Music)
  Param[2]: position (type: float)
Function 543: SetMusicVolume() (2 input parameters)
  Name: SetMusicVolume
  Return type: void
  Description: Set volume for music (1.0 is max level)
  Param[1]: music (type: Music)
  Param[2]: volume (type: float)
Function 544: SetMusicPitch() (2 input parameters)
  Name: SetMusicPitch
  Return type: void
  Description: Set pitch for a music (1.0 is base level)
  Param[1]: music (type: Music)
  Param[2]: pitch (type: float)
Function 545: SetMusicPan() (2 input parameters)
  Name: SetMusicPan
  Return type: void
  Description: Set pan for a music (0.5 is center)
  Param[1]: music (type: Music)
  Param[2]: pan (type: float)
Function 546: GetMusicTimeLength() (1 input parameters)
  Name: GetMusicTimeLength
  Return type: float
  Description: Get music time length (in seconds)
  Param[1]: music (type: Music)
Function 547: GetMusicTimePlayed() (1 input parameters)
  Name: GetMusicTimePlayed
  Return type: float
  Description: Get current music time played (in seconds)
  Param[1]: music (type: Music)
Function 548: LoadAudioStream() (3 input parameters)
  Name: LoadAudioStream
  Return type: AudioStream
  Description: Load audio stream (to stream raw audio pcm data)
  Param[1]: sampleRate (type: unsigned int)
  Param[2]: sampleSize (type: unsigned int)
  Param[3]: channels (type: unsigned int)
Function 549: IsAudioStreamReady() (1 input parameters)
  Name: IsAudioStreamReady
  Return type: bool
  Description: Checks if an audio stream is ready
  Param[1]: stream (type: AudioStream)
Function 550: UnloadAudioStream() (1 input parameters)
  Name: UnloadAudioStream
  Return type: void
  Description: Unload audio stream and free memory
  Param[1]: stream (type: AudioStream)
Function 551: UpdateAudioStream() (3 input parameters)
  Name: UpdateAudioStream
  Return type: void
  Description: Update audio stream buffers with data
  Param[1]: stream (type: AudioStream)
  Param[2]: data (type: const void *)
  Param[3]: frameCount (type: int)
Function 552: IsAudioStreamProcessed() (1 input parameters)
  Name: IsAudioStreamProcessed
  Return type: bool
  Description: Check if any audio stream buffers requires refill
  Param[1]: stream (type: AudioStream)
Function 553: PlayAudioStream() (1 input parameters)
  Name: PlayAudioStream
  Return type: void
  Description: Play audio stream
  Param[1]: stream (type: AudioStream)
Function 554: PauseAudioStream() (1 input parameters)
  Name: PauseAudioStream
  Return type: void
  Description: Pause audio stream
  Param[1]: stream (type: AudioStream)
Function 555: ResumeAudioStream() (1 input parameters)
  Name: ResumeAudioStream
  Return type: void
  Description: Resume audio stream
  Param[1]: stream (type: AudioStream)
Function 556: IsAudioStreamPlaying() (1 input parameters)
  Name: IsAudioStreamPlaying
  Return type: bool
  Description: Check if audio stream is playing
  Param[1]: stream (type: AudioStream)
Function 557: StopAudioStream() (1 input parameters)
  Name: StopAudioStream
  Return type: void
  Description: Stop audio stream
  Param[1]: stream (type: AudioStream)
Function 558: SetAudioStreamVolume() (2 input parameters)
  Name: SetAudioStreamVolume
  Return type: void
  Description: Set volume for audio stream (1.0 is max level)
  Param[1]: stream (type: AudioStream)
  Param[2]: volume (type: float)
Function 559: SetAudioStreamPitch() (2 input parameters)
  Name: SetAudioStreamPitch
  Return type: void
  Description: Set pitch for audio stream (1.0 is base level)
  Param[1]: stream (type: AudioStream)
  Param[2]: pitch (type: float)
Function 560: SetAudioStreamPan() (2 input parameters)
  Name: SetAudioStreamPan
  Return type: void
  Description: Set pan for audio stream (0.5 is centered)
  Param[1]: stream (type: AudioStream)
  Param[2]: pan (type: float)
Function 561: SetAudioStreamBufferSizeDefault() (1 input parameters)
  Name: SetAudioStreamBufferSizeDefault
  Return type: void
  Description: Default size for new audio streams
  Param[1]: size (type: int)
Function 562: SetAudioStreamCallback() (2 input parameters)
  Name: SetAudioStreamCallback
  Return type: void
  Description: Audio thread callback to request new data
  Param[1]: stream (type: AudioStream)
  Param[2]: callback (type: AudioCallback)
Function 563: AttachAudioStreamProcessor() (2 input parameters)
  Name: AttachAudioStreamProcessor
  Return type: void
  Description: Attach audio stream processor to stream, receives the samples as 'float'
  Param[1]: stream (type: AudioStream)
  Param[2]: processor (type: AudioCallback)
Function 564: DetachAudioStreamProcessor() (2 input parameters)
  Name: DetachAudioStreamProcessor
  Return type: void
  Description: Detach audio stream processor from stream
  Param[1]: stream (type: AudioStream)
  Param[2]: processor (type: AudioCallback)
Function 565: AttachAudioMixedProcessor() (1 input parameters)
  Name: AttachAudioMixedProcessor
  Return type: void
  Description: Attach audio stream processor to the entire audio pipeline, receives the samples as 'float'
  Param[1]: processor (type: AudioCallback)
Function 566: DetachAudioMixedProcessor() (1 input parameters)
  Name: DetachAudioMixedProcessor
  Return type: void
  Description: Detach audio stream processor from the entire audio pipeline
  Param[1]: processor (type: AudioCallback)
